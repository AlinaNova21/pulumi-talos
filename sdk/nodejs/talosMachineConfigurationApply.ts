// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Applies machine configuration to a Talos node.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as talos from "@pulumi/talos";
 *
 * const machineSecrets = new talos.TalosMachineSecrets("machineSecrets", {});
 * const talosconfig = new talos.TalosClientConfiguration("talosconfig", {
 *     clusterName: "example-cluster",
 *     machineSecrets: machineSecrets.machineSecrets,
 *     endpoints: ["10.5.0.2"],
 * });
 * const machineconfigCp = new talos.TalosMachineConfigurationControlplane("machineconfigCp", {
 *     clusterName: talosconfig.clusterName,
 *     clusterEndpoint: "https://cluster.local:6443",
 *     machineSecrets: machineSecrets.machineSecrets,
 * });
 * const configApply = new talos.TalosMachineConfigurationApply("configApply", {
 *     talosConfig: talosconfig.talosConfig,
 *     machineConfiguration: machineconfigCp.machineConfig,
 *     configPatches: [fs.readFileSync(`${path.module}/files/worker.yaml`)],
 *     endpoint: "10.5.0.2",
 *     node: "10.5.0.2",
 * });
 * ```
 */
export class TalosMachineConfigurationApply extends pulumi.CustomResource {
    /**
     * Get an existing TalosMachineConfigurationApply resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TalosMachineConfigurationApplyState, opts?: pulumi.CustomResourceOptions): TalosMachineConfigurationApply {
        return new TalosMachineConfigurationApply(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'talos:index/talosMachineConfigurationApply:TalosMachineConfigurationApply';

    /**
     * Returns true if the given object is an instance of TalosMachineConfigurationApply.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TalosMachineConfigurationApply {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TalosMachineConfigurationApply.__pulumiType;
    }

    /**
     * config patches to apply to the generated config
     */
    public readonly configPatches!: pulumi.Output<string[] | undefined>;
    /**
     * machine endpoint
     */
    public readonly endpoint!: pulumi.Output<string>;
    /**
     * machine configuration
     */
    public readonly machineConfiguration!: pulumi.Output<string>;
    /**
     * The mode to apply the configuration in.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * node to apply the config against
     */
    public readonly node!: pulumi.Output<string>;
    /**
     * talos client configuration for authentication
     */
    public readonly talosConfig!: pulumi.Output<string>;

    /**
     * Create a TalosMachineConfigurationApply resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TalosMachineConfigurationApplyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TalosMachineConfigurationApplyArgs | TalosMachineConfigurationApplyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TalosMachineConfigurationApplyState | undefined;
            resourceInputs["configPatches"] = state ? state.configPatches : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["machineConfiguration"] = state ? state.machineConfiguration : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["node"] = state ? state.node : undefined;
            resourceInputs["talosConfig"] = state ? state.talosConfig : undefined;
        } else {
            const args = argsOrState as TalosMachineConfigurationApplyArgs | undefined;
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.machineConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineConfiguration'");
            }
            if ((!args || args.node === undefined) && !opts.urn) {
                throw new Error("Missing required property 'node'");
            }
            if ((!args || args.talosConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'talosConfig'");
            }
            resourceInputs["configPatches"] = args ? args.configPatches : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["machineConfiguration"] = args ? args.machineConfiguration : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["node"] = args ? args.node : undefined;
            resourceInputs["talosConfig"] = args ? args.talosConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TalosMachineConfigurationApply.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TalosMachineConfigurationApply resources.
 */
export interface TalosMachineConfigurationApplyState {
    /**
     * config patches to apply to the generated config
     */
    configPatches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * machine endpoint
     */
    endpoint?: pulumi.Input<string>;
    /**
     * machine configuration
     */
    machineConfiguration?: pulumi.Input<string>;
    /**
     * The mode to apply the configuration in.
     */
    mode?: pulumi.Input<string>;
    /**
     * node to apply the config against
     */
    node?: pulumi.Input<string>;
    /**
     * talos client configuration for authentication
     */
    talosConfig?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TalosMachineConfigurationApply resource.
 */
export interface TalosMachineConfigurationApplyArgs {
    /**
     * config patches to apply to the generated config
     */
    configPatches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * machine endpoint
     */
    endpoint: pulumi.Input<string>;
    /**
     * machine configuration
     */
    machineConfiguration: pulumi.Input<string>;
    /**
     * The mode to apply the configuration in.
     */
    mode?: pulumi.Input<string>;
    /**
     * node to apply the config against
     */
    node: pulumi.Input<string>;
    /**
     * talos client configuration for authentication
     */
    talosConfig: pulumi.Input<string>;
}
