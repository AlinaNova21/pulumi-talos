// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TalosClientConfigurationArgs, TalosClientConfigurationState } from "./talosClientConfiguration";
export type TalosClientConfiguration = import("./talosClientConfiguration").TalosClientConfiguration;
export const TalosClientConfiguration: typeof import("./talosClientConfiguration").TalosClientConfiguration = null as any;
utilities.lazyLoad(exports, ["TalosClientConfiguration"], () => require("./talosClientConfiguration"));

export { TalosClusterKubeconfigArgs, TalosClusterKubeconfigState } from "./talosClusterKubeconfig";
export type TalosClusterKubeconfig = import("./talosClusterKubeconfig").TalosClusterKubeconfig;
export const TalosClusterKubeconfig: typeof import("./talosClusterKubeconfig").TalosClusterKubeconfig = null as any;
utilities.lazyLoad(exports, ["TalosClusterKubeconfig"], () => require("./talosClusterKubeconfig"));

export { TalosMachineBootstrapArgs, TalosMachineBootstrapState } from "./talosMachineBootstrap";
export type TalosMachineBootstrap = import("./talosMachineBootstrap").TalosMachineBootstrap;
export const TalosMachineBootstrap: typeof import("./talosMachineBootstrap").TalosMachineBootstrap = null as any;
utilities.lazyLoad(exports, ["TalosMachineBootstrap"], () => require("./talosMachineBootstrap"));

export { TalosMachineConfigurationApplyArgs, TalosMachineConfigurationApplyState } from "./talosMachineConfigurationApply";
export type TalosMachineConfigurationApply = import("./talosMachineConfigurationApply").TalosMachineConfigurationApply;
export const TalosMachineConfigurationApply: typeof import("./talosMachineConfigurationApply").TalosMachineConfigurationApply = null as any;
utilities.lazyLoad(exports, ["TalosMachineConfigurationApply"], () => require("./talosMachineConfigurationApply"));

export { TalosMachineConfigurationControlplaneArgs, TalosMachineConfigurationControlplaneState } from "./talosMachineConfigurationControlplane";
export type TalosMachineConfigurationControlplane = import("./talosMachineConfigurationControlplane").TalosMachineConfigurationControlplane;
export const TalosMachineConfigurationControlplane: typeof import("./talosMachineConfigurationControlplane").TalosMachineConfigurationControlplane = null as any;
utilities.lazyLoad(exports, ["TalosMachineConfigurationControlplane"], () => require("./talosMachineConfigurationControlplane"));

export { TalosMachineConfigurationWorkerArgs, TalosMachineConfigurationWorkerState } from "./talosMachineConfigurationWorker";
export type TalosMachineConfigurationWorker = import("./talosMachineConfigurationWorker").TalosMachineConfigurationWorker;
export const TalosMachineConfigurationWorker: typeof import("./talosMachineConfigurationWorker").TalosMachineConfigurationWorker = null as any;
utilities.lazyLoad(exports, ["TalosMachineConfigurationWorker"], () => require("./talosMachineConfigurationWorker"));

export { TalosMachineSecretsArgs, TalosMachineSecretsState } from "./talosMachineSecrets";
export type TalosMachineSecrets = import("./talosMachineSecrets").TalosMachineSecrets;
export const TalosMachineSecrets: typeof import("./talosMachineSecrets").TalosMachineSecrets = null as any;
utilities.lazyLoad(exports, ["TalosMachineSecrets"], () => require("./talosMachineSecrets"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "talos:index/talosClientConfiguration:TalosClientConfiguration":
                return new TalosClientConfiguration(name, <any>undefined, { urn })
            case "talos:index/talosClusterKubeconfig:TalosClusterKubeconfig":
                return new TalosClusterKubeconfig(name, <any>undefined, { urn })
            case "talos:index/talosMachineBootstrap:TalosMachineBootstrap":
                return new TalosMachineBootstrap(name, <any>undefined, { urn })
            case "talos:index/talosMachineConfigurationApply:TalosMachineConfigurationApply":
                return new TalosMachineConfigurationApply(name, <any>undefined, { urn })
            case "talos:index/talosMachineConfigurationControlplane:TalosMachineConfigurationControlplane":
                return new TalosMachineConfigurationControlplane(name, <any>undefined, { urn })
            case "talos:index/talosMachineConfigurationWorker:TalosMachineConfigurationWorker":
                return new TalosMachineConfigurationWorker(name, <any>undefined, { urn })
            case "talos:index/talosMachineSecrets:TalosMachineSecrets":
                return new TalosMachineSecrets(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("talos", "index/talosClientConfiguration", _module)
pulumi.runtime.registerResourceModule("talos", "index/talosClusterKubeconfig", _module)
pulumi.runtime.registerResourceModule("talos", "index/talosMachineBootstrap", _module)
pulumi.runtime.registerResourceModule("talos", "index/talosMachineConfigurationApply", _module)
pulumi.runtime.registerResourceModule("talos", "index/talosMachineConfigurationControlplane", _module)
pulumi.runtime.registerResourceModule("talos", "index/talosMachineConfigurationWorker", _module)
pulumi.runtime.registerResourceModule("talos", "index/talosMachineSecrets", _module)
pulumi.runtime.registerResourcePackage("talos", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:talos") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
