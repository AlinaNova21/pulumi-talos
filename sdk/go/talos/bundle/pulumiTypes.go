// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bundle

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Talos Certs type
type Certs struct {
	Admin             *PEMEncodedCertificateAndKey `pulumi:"Admin"`
	Etcd              *PEMEncodedCertificateAndKey `pulumi:"Etcd"`
	K8s               *PEMEncodedCertificateAndKey `pulumi:"K8s"`
	K8sAggregator     *PEMEncodedCertificateAndKey `pulumi:"K8sAggregator"`
	K8sServiceAccount *PEMEncodedKey               `pulumi:"K8sServiceAccount"`
	OS                *PEMEncodedCertificateAndKey `pulumi:"OS"`
}

// Talos Certs type
type CertsOutput struct{ *pulumi.OutputState }

func (CertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certs)(nil)).Elem()
}

func (o CertsOutput) ToCertsOutput() CertsOutput {
	return o
}

func (o CertsOutput) ToCertsOutputWithContext(ctx context.Context) CertsOutput {
	return o
}

func (o CertsOutput) Admin() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.Admin }).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsOutput) Etcd() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.Etcd }).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsOutput) K8s() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.K8s }).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsOutput) K8sAggregator() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.K8sAggregator }).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsOutput) K8sServiceAccount() PEMEncodedKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedKey { return v.K8sServiceAccount }).(PEMEncodedKeyPtrOutput)
}

func (o CertsOutput) OS() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.OS }).(PEMEncodedCertificateAndKeyPtrOutput)
}

type CertsPtrOutput struct{ *pulumi.OutputState }

func (CertsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certs)(nil)).Elem()
}

func (o CertsPtrOutput) ToCertsPtrOutput() CertsPtrOutput {
	return o
}

func (o CertsPtrOutput) ToCertsPtrOutputWithContext(ctx context.Context) CertsPtrOutput {
	return o
}

func (o CertsPtrOutput) Elem() CertsOutput {
	return o.ApplyT(func(v *Certs) Certs {
		if v != nil {
			return *v
		}
		var ret Certs
		return ret
	}).(CertsOutput)
}

func (o CertsPtrOutput) Admin() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.Admin
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsPtrOutput) Etcd() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.Etcd
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsPtrOutput) K8s() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.K8s
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsPtrOutput) K8sAggregator() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.K8sAggregator
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsPtrOutput) K8sServiceAccount() PEMEncodedKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedKey {
		if v == nil {
			return nil
		}
		return v.K8sServiceAccount
	}).(PEMEncodedKeyPtrOutput)
}

func (o CertsPtrOutput) OS() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.OS
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

// Talos Cluster type
type Cluster struct {
	Id     *string `pulumi:"Id"`
	Secret *string `pulumi:"Secret"`
}

// Talos Cluster type
type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cluster) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cluster) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type ClusterPtrOutput struct{ *pulumi.OutputState }

func (ClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterPtrOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) Elem() ClusterOutput {
	return o.ApplyT(func(v *Cluster) Cluster {
		if v != nil {
			return *v
		}
		var ret Cluster
		return ret
	}).(ClusterOutput)
}

func (o ClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o ClusterPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Talos PEMEncodedCertificateAndKey type
type PEMEncodedCertificateAndKey struct {
	Crt interface{} `pulumi:"Crt"`
	Key interface{} `pulumi:"Key"`
}

// Talos PEMEncodedCertificateAndKey type
type PEMEncodedCertificateAndKeyOutput struct{ *pulumi.OutputState }

func (PEMEncodedCertificateAndKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PEMEncodedCertificateAndKey)(nil)).Elem()
}

func (o PEMEncodedCertificateAndKeyOutput) ToPEMEncodedCertificateAndKeyOutput() PEMEncodedCertificateAndKeyOutput {
	return o
}

func (o PEMEncodedCertificateAndKeyOutput) ToPEMEncodedCertificateAndKeyOutputWithContext(ctx context.Context) PEMEncodedCertificateAndKeyOutput {
	return o
}

func (o PEMEncodedCertificateAndKeyOutput) Crt() pulumi.AnyOutput {
	return o.ApplyT(func(v PEMEncodedCertificateAndKey) interface{} { return v.Crt }).(pulumi.AnyOutput)
}

func (o PEMEncodedCertificateAndKeyOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v PEMEncodedCertificateAndKey) interface{} { return v.Key }).(pulumi.AnyOutput)
}

type PEMEncodedCertificateAndKeyPtrOutput struct{ *pulumi.OutputState }

func (PEMEncodedCertificateAndKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PEMEncodedCertificateAndKey)(nil)).Elem()
}

func (o PEMEncodedCertificateAndKeyPtrOutput) ToPEMEncodedCertificateAndKeyPtrOutput() PEMEncodedCertificateAndKeyPtrOutput {
	return o
}

func (o PEMEncodedCertificateAndKeyPtrOutput) ToPEMEncodedCertificateAndKeyPtrOutputWithContext(ctx context.Context) PEMEncodedCertificateAndKeyPtrOutput {
	return o
}

func (o PEMEncodedCertificateAndKeyPtrOutput) Elem() PEMEncodedCertificateAndKeyOutput {
	return o.ApplyT(func(v *PEMEncodedCertificateAndKey) PEMEncodedCertificateAndKey {
		if v != nil {
			return *v
		}
		var ret PEMEncodedCertificateAndKey
		return ret
	}).(PEMEncodedCertificateAndKeyOutput)
}

func (o PEMEncodedCertificateAndKeyPtrOutput) Crt() pulumi.AnyOutput {
	return o.ApplyT(func(v *PEMEncodedCertificateAndKey) interface{} {
		if v == nil {
			return nil
		}
		return v.Crt
	}).(pulumi.AnyOutput)
}

func (o PEMEncodedCertificateAndKeyPtrOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v *PEMEncodedCertificateAndKey) interface{} {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.AnyOutput)
}

// Talos PEMEncodedKey type
type PEMEncodedKey struct {
	Key interface{} `pulumi:"Key"`
}

// Talos PEMEncodedKey type
type PEMEncodedKeyOutput struct{ *pulumi.OutputState }

func (PEMEncodedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PEMEncodedKey)(nil)).Elem()
}

func (o PEMEncodedKeyOutput) ToPEMEncodedKeyOutput() PEMEncodedKeyOutput {
	return o
}

func (o PEMEncodedKeyOutput) ToPEMEncodedKeyOutputWithContext(ctx context.Context) PEMEncodedKeyOutput {
	return o
}

func (o PEMEncodedKeyOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v PEMEncodedKey) interface{} { return v.Key }).(pulumi.AnyOutput)
}

type PEMEncodedKeyPtrOutput struct{ *pulumi.OutputState }

func (PEMEncodedKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PEMEncodedKey)(nil)).Elem()
}

func (o PEMEncodedKeyPtrOutput) ToPEMEncodedKeyPtrOutput() PEMEncodedKeyPtrOutput {
	return o
}

func (o PEMEncodedKeyPtrOutput) ToPEMEncodedKeyPtrOutputWithContext(ctx context.Context) PEMEncodedKeyPtrOutput {
	return o
}

func (o PEMEncodedKeyPtrOutput) Elem() PEMEncodedKeyOutput {
	return o.ApplyT(func(v *PEMEncodedKey) PEMEncodedKey {
		if v != nil {
			return *v
		}
		var ret PEMEncodedKey
		return ret
	}).(PEMEncodedKeyOutput)
}

func (o PEMEncodedKeyPtrOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v *PEMEncodedKey) interface{} {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.AnyOutput)
}

// Talos Secrets type
type Secrets struct {
	AESCBCEncryptionSecret *string `pulumi:"AESCBCEncryptionSecret"`
	BootstrapToken         *string `pulumi:"BootstrapToken"`
}

// Talos Secrets type
type SecretsOutput struct{ *pulumi.OutputState }

func (SecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secrets)(nil)).Elem()
}

func (o SecretsOutput) ToSecretsOutput() SecretsOutput {
	return o
}

func (o SecretsOutput) ToSecretsOutputWithContext(ctx context.Context) SecretsOutput {
	return o
}

func (o SecretsOutput) AESCBCEncryptionSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secrets) *string { return v.AESCBCEncryptionSecret }).(pulumi.StringPtrOutput)
}

func (o SecretsOutput) BootstrapToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secrets) *string { return v.BootstrapToken }).(pulumi.StringPtrOutput)
}

type SecretsPtrOutput struct{ *pulumi.OutputState }

func (SecretsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secrets)(nil)).Elem()
}

func (o SecretsPtrOutput) ToSecretsPtrOutput() SecretsPtrOutput {
	return o
}

func (o SecretsPtrOutput) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return o
}

func (o SecretsPtrOutput) Elem() SecretsOutput {
	return o.ApplyT(func(v *Secrets) Secrets {
		if v != nil {
			return *v
		}
		var ret Secrets
		return ret
	}).(SecretsOutput)
}

func (o SecretsPtrOutput) AESCBCEncryptionSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secrets) *string {
		if v == nil {
			return nil
		}
		return v.AESCBCEncryptionSecret
	}).(pulumi.StringPtrOutput)
}

func (o SecretsPtrOutput) BootstrapToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secrets) *string {
		if v == nil {
			return nil
		}
		return v.BootstrapToken
	}).(pulumi.StringPtrOutput)
}

// Talos SecretsBundle type
type SecretsBundleType struct {
	Certs      *Certs      `pulumi:"Certs"`
	Cluster    *Cluster    `pulumi:"Cluster"`
	Secrets    *Secrets    `pulumi:"Secrets"`
	TrustdInfo *TrustdInfo `pulumi:"TrustdInfo"`
}

// Talos SecretsBundle type
type SecretsBundleTypeOutput struct{ *pulumi.OutputState }

func (SecretsBundleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsBundleType)(nil)).Elem()
}

func (o SecretsBundleTypeOutput) ToSecretsBundleTypeOutput() SecretsBundleTypeOutput {
	return o
}

func (o SecretsBundleTypeOutput) ToSecretsBundleTypeOutputWithContext(ctx context.Context) SecretsBundleTypeOutput {
	return o
}

func (o SecretsBundleTypeOutput) Certs() CertsPtrOutput {
	return o.ApplyT(func(v SecretsBundleType) *Certs { return v.Certs }).(CertsPtrOutput)
}

func (o SecretsBundleTypeOutput) Cluster() ClusterPtrOutput {
	return o.ApplyT(func(v SecretsBundleType) *Cluster { return v.Cluster }).(ClusterPtrOutput)
}

func (o SecretsBundleTypeOutput) Secrets() SecretsPtrOutput {
	return o.ApplyT(func(v SecretsBundleType) *Secrets { return v.Secrets }).(SecretsPtrOutput)
}

func (o SecretsBundleTypeOutput) TrustdInfo() TrustdInfoPtrOutput {
	return o.ApplyT(func(v SecretsBundleType) *TrustdInfo { return v.TrustdInfo }).(TrustdInfoPtrOutput)
}

// Talos TrustdInfo type
type TrustdInfo struct {
	Token *string `pulumi:"Token"`
}

// Talos TrustdInfo type
type TrustdInfoOutput struct{ *pulumi.OutputState }

func (TrustdInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustdInfo)(nil)).Elem()
}

func (o TrustdInfoOutput) ToTrustdInfoOutput() TrustdInfoOutput {
	return o
}

func (o TrustdInfoOutput) ToTrustdInfoOutputWithContext(ctx context.Context) TrustdInfoOutput {
	return o
}

func (o TrustdInfoOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrustdInfo) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type TrustdInfoPtrOutput struct{ *pulumi.OutputState }

func (TrustdInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustdInfo)(nil)).Elem()
}

func (o TrustdInfoPtrOutput) ToTrustdInfoPtrOutput() TrustdInfoPtrOutput {
	return o
}

func (o TrustdInfoPtrOutput) ToTrustdInfoPtrOutputWithContext(ctx context.Context) TrustdInfoPtrOutput {
	return o
}

func (o TrustdInfoPtrOutput) Elem() TrustdInfoOutput {
	return o.ApplyT(func(v *TrustdInfo) TrustdInfo {
		if v != nil {
			return *v
		}
		var ret TrustdInfo
		return ret
	}).(TrustdInfoOutput)
}

func (o TrustdInfoPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustdInfo) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CertsOutput{})
	pulumi.RegisterOutputType(CertsPtrOutput{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterPtrOutput{})
	pulumi.RegisterOutputType(PEMEncodedCertificateAndKeyOutput{})
	pulumi.RegisterOutputType(PEMEncodedCertificateAndKeyPtrOutput{})
	pulumi.RegisterOutputType(PEMEncodedKeyOutput{})
	pulumi.RegisterOutputType(PEMEncodedKeyPtrOutput{})
	pulumi.RegisterOutputType(SecretsOutput{})
	pulumi.RegisterOutputType(SecretsPtrOutput{})
	pulumi.RegisterOutputType(SecretsBundleTypeOutput{})
	pulumi.RegisterOutputType(TrustdInfoOutput{})
	pulumi.RegisterOutputType(TrustdInfoPtrOutput{})
}
