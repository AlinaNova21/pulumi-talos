// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bundle

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Talos secretsBundle resource
type SecretsBundle struct {
	pulumi.CustomResourceState

	SecretsBundle SecretsBundleTypeOutput `pulumi:"secretsBundle"`
}

// NewSecretsBundle registers a new resource with the given unique name, arguments, and options.
func NewSecretsBundle(ctx *pulumi.Context,
	name string, args *SecretsBundleArgs, opts ...pulumi.ResourceOption) (*SecretsBundle, error) {
	if args == nil {
		args = &SecretsBundleArgs{}
	}

	if args.ConfigVersion == nil {
		args.ConfigVersion = pulumi.StringPtr("v1alpha1")
	}
	var resource SecretsBundle
	err := ctx.RegisterResource("talos:bundle:secretsBundle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretsBundle gets an existing SecretsBundle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretsBundle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretsBundleState, opts ...pulumi.ResourceOption) (*SecretsBundle, error) {
	var resource SecretsBundle
	err := ctx.ReadResource("talos:bundle:secretsBundle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretsBundle resources.
type secretsBundleState struct {
}

type SecretsBundleState struct {
}

func (SecretsBundleState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsBundleState)(nil)).Elem()
}

type secretsBundleArgs struct {
	// the desired machine config version to generate (default "v1alpha1")
	ConfigVersion *string `pulumi:"configVersion"`
	// the desired Talos version to generate config for (backwards compatibility, e.g. v0.8)
	TalosVersion *string `pulumi:"talosVersion"`
}

// The set of arguments for constructing a SecretsBundle resource.
type SecretsBundleArgs struct {
	// the desired machine config version to generate (default "v1alpha1")
	ConfigVersion pulumi.StringPtrInput
	// the desired Talos version to generate config for (backwards compatibility, e.g. v0.8)
	TalosVersion pulumi.StringPtrInput
}

func (SecretsBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsBundleArgs)(nil)).Elem()
}

type SecretsBundleInput interface {
	pulumi.Input

	ToSecretsBundleOutput() SecretsBundleOutput
	ToSecretsBundleOutputWithContext(ctx context.Context) SecretsBundleOutput
}

func (*SecretsBundle) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsBundle)(nil))
}

func (i *SecretsBundle) ToSecretsBundleOutput() SecretsBundleOutput {
	return i.ToSecretsBundleOutputWithContext(context.Background())
}

func (i *SecretsBundle) ToSecretsBundleOutputWithContext(ctx context.Context) SecretsBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsBundleOutput)
}

func (i *SecretsBundle) ToSecretsBundlePtrOutput() SecretsBundlePtrOutput {
	return i.ToSecretsBundlePtrOutputWithContext(context.Background())
}

func (i *SecretsBundle) ToSecretsBundlePtrOutputWithContext(ctx context.Context) SecretsBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsBundlePtrOutput)
}

type SecretsBundlePtrInput interface {
	pulumi.Input

	ToSecretsBundlePtrOutput() SecretsBundlePtrOutput
	ToSecretsBundlePtrOutputWithContext(ctx context.Context) SecretsBundlePtrOutput
}

type secretsBundlePtrType SecretsBundleArgs

func (*secretsBundlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsBundle)(nil))
}

func (i *secretsBundlePtrType) ToSecretsBundlePtrOutput() SecretsBundlePtrOutput {
	return i.ToSecretsBundlePtrOutputWithContext(context.Background())
}

func (i *secretsBundlePtrType) ToSecretsBundlePtrOutputWithContext(ctx context.Context) SecretsBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsBundlePtrOutput)
}

// SecretsBundleArrayInput is an input type that accepts SecretsBundleArray and SecretsBundleArrayOutput values.
// You can construct a concrete instance of `SecretsBundleArrayInput` via:
//
//          SecretsBundleArray{ SecretsBundleArgs{...} }
type SecretsBundleArrayInput interface {
	pulumi.Input

	ToSecretsBundleArrayOutput() SecretsBundleArrayOutput
	ToSecretsBundleArrayOutputWithContext(context.Context) SecretsBundleArrayOutput
}

type SecretsBundleArray []SecretsBundleInput

func (SecretsBundleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretsBundle)(nil)).Elem()
}

func (i SecretsBundleArray) ToSecretsBundleArrayOutput() SecretsBundleArrayOutput {
	return i.ToSecretsBundleArrayOutputWithContext(context.Background())
}

func (i SecretsBundleArray) ToSecretsBundleArrayOutputWithContext(ctx context.Context) SecretsBundleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsBundleArrayOutput)
}

// SecretsBundleMapInput is an input type that accepts SecretsBundleMap and SecretsBundleMapOutput values.
// You can construct a concrete instance of `SecretsBundleMapInput` via:
//
//          SecretsBundleMap{ "key": SecretsBundleArgs{...} }
type SecretsBundleMapInput interface {
	pulumi.Input

	ToSecretsBundleMapOutput() SecretsBundleMapOutput
	ToSecretsBundleMapOutputWithContext(context.Context) SecretsBundleMapOutput
}

type SecretsBundleMap map[string]SecretsBundleInput

func (SecretsBundleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretsBundle)(nil)).Elem()
}

func (i SecretsBundleMap) ToSecretsBundleMapOutput() SecretsBundleMapOutput {
	return i.ToSecretsBundleMapOutputWithContext(context.Background())
}

func (i SecretsBundleMap) ToSecretsBundleMapOutputWithContext(ctx context.Context) SecretsBundleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsBundleMapOutput)
}

type SecretsBundleOutput struct {
	*pulumi.OutputState
}

func (SecretsBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsBundle)(nil))
}

func (o SecretsBundleOutput) ToSecretsBundleOutput() SecretsBundleOutput {
	return o
}

func (o SecretsBundleOutput) ToSecretsBundleOutputWithContext(ctx context.Context) SecretsBundleOutput {
	return o
}

func (o SecretsBundleOutput) ToSecretsBundlePtrOutput() SecretsBundlePtrOutput {
	return o.ToSecretsBundlePtrOutputWithContext(context.Background())
}

func (o SecretsBundleOutput) ToSecretsBundlePtrOutputWithContext(ctx context.Context) SecretsBundlePtrOutput {
	return o.ApplyT(func(v SecretsBundle) *SecretsBundle {
		return &v
	}).(SecretsBundlePtrOutput)
}

type SecretsBundlePtrOutput struct {
	*pulumi.OutputState
}

func (SecretsBundlePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsBundle)(nil))
}

func (o SecretsBundlePtrOutput) ToSecretsBundlePtrOutput() SecretsBundlePtrOutput {
	return o
}

func (o SecretsBundlePtrOutput) ToSecretsBundlePtrOutputWithContext(ctx context.Context) SecretsBundlePtrOutput {
	return o
}

type SecretsBundleArrayOutput struct{ *pulumi.OutputState }

func (SecretsBundleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsBundle)(nil))
}

func (o SecretsBundleArrayOutput) ToSecretsBundleArrayOutput() SecretsBundleArrayOutput {
	return o
}

func (o SecretsBundleArrayOutput) ToSecretsBundleArrayOutputWithContext(ctx context.Context) SecretsBundleArrayOutput {
	return o
}

func (o SecretsBundleArrayOutput) Index(i pulumi.IntInput) SecretsBundleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsBundle {
		return vs[0].([]SecretsBundle)[vs[1].(int)]
	}).(SecretsBundleOutput)
}

type SecretsBundleMapOutput struct{ *pulumi.OutputState }

func (SecretsBundleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretsBundle)(nil))
}

func (o SecretsBundleMapOutput) ToSecretsBundleMapOutput() SecretsBundleMapOutput {
	return o
}

func (o SecretsBundleMapOutput) ToSecretsBundleMapOutputWithContext(ctx context.Context) SecretsBundleMapOutput {
	return o
}

func (o SecretsBundleMapOutput) MapIndex(k pulumi.StringInput) SecretsBundleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecretsBundle {
		return vs[0].(map[string]SecretsBundle)[vs[1].(string)]
	}).(SecretsBundleOutput)
}

func init() {
	pulumi.RegisterOutputType(SecretsBundleOutput{})
	pulumi.RegisterOutputType(SecretsBundlePtrOutput{})
	pulumi.RegisterOutputType(SecretsBundleArrayOutput{})
	pulumi.RegisterOutputType(SecretsBundleMapOutput{})
}
