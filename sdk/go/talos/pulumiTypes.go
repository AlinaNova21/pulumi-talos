// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package talos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Talos Certs type
type Certs struct {
	Admin             *PEMEncodedCertificateAndKey `pulumi:"Admin"`
	Etcd              *PEMEncodedCertificateAndKey `pulumi:"Etcd"`
	K8s               *PEMEncodedCertificateAndKey `pulumi:"K8s"`
	K8sAggregator     *PEMEncodedCertificateAndKey `pulumi:"K8sAggregator"`
	K8sServiceAccount *PEMEncodedKey               `pulumi:"K8sServiceAccount"`
	OS                *PEMEncodedCertificateAndKey `pulumi:"OS"`
}

// CertsInput is an input type that accepts CertsArgs and CertsOutput values.
// You can construct a concrete instance of `CertsInput` via:
//
//          CertsArgs{...}
type CertsInput interface {
	pulumi.Input

	ToCertsOutput() CertsOutput
	ToCertsOutputWithContext(context.Context) CertsOutput
}

// Talos Certs type
type CertsArgs struct {
	Admin             PEMEncodedCertificateAndKeyPtrInput `pulumi:"Admin"`
	Etcd              PEMEncodedCertificateAndKeyPtrInput `pulumi:"Etcd"`
	K8s               PEMEncodedCertificateAndKeyPtrInput `pulumi:"K8s"`
	K8sAggregator     PEMEncodedCertificateAndKeyPtrInput `pulumi:"K8sAggregator"`
	K8sServiceAccount PEMEncodedKeyPtrInput               `pulumi:"K8sServiceAccount"`
	OS                PEMEncodedCertificateAndKeyPtrInput `pulumi:"OS"`
}

func (CertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Certs)(nil)).Elem()
}

func (i CertsArgs) ToCertsOutput() CertsOutput {
	return i.ToCertsOutputWithContext(context.Background())
}

func (i CertsArgs) ToCertsOutputWithContext(ctx context.Context) CertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertsOutput)
}

func (i CertsArgs) ToCertsPtrOutput() CertsPtrOutput {
	return i.ToCertsPtrOutputWithContext(context.Background())
}

func (i CertsArgs) ToCertsPtrOutputWithContext(ctx context.Context) CertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertsOutput).ToCertsPtrOutputWithContext(ctx)
}

// CertsPtrInput is an input type that accepts CertsArgs, CertsPtr and CertsPtrOutput values.
// You can construct a concrete instance of `CertsPtrInput` via:
//
//          CertsArgs{...}
//
//  or:
//
//          nil
type CertsPtrInput interface {
	pulumi.Input

	ToCertsPtrOutput() CertsPtrOutput
	ToCertsPtrOutputWithContext(context.Context) CertsPtrOutput
}

type certsPtrType CertsArgs

func CertsPtr(v *CertsArgs) CertsPtrInput {
	return (*certsPtrType)(v)
}

func (*certsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Certs)(nil)).Elem()
}

func (i *certsPtrType) ToCertsPtrOutput() CertsPtrOutput {
	return i.ToCertsPtrOutputWithContext(context.Background())
}

func (i *certsPtrType) ToCertsPtrOutputWithContext(ctx context.Context) CertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertsPtrOutput)
}

// Talos Certs type
type CertsOutput struct{ *pulumi.OutputState }

func (CertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certs)(nil)).Elem()
}

func (o CertsOutput) ToCertsOutput() CertsOutput {
	return o
}

func (o CertsOutput) ToCertsOutputWithContext(ctx context.Context) CertsOutput {
	return o
}

func (o CertsOutput) ToCertsPtrOutput() CertsPtrOutput {
	return o.ToCertsPtrOutputWithContext(context.Background())
}

func (o CertsOutput) ToCertsPtrOutputWithContext(ctx context.Context) CertsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Certs) *Certs {
		return &v
	}).(CertsPtrOutput)
}

func (o CertsOutput) Admin() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.Admin }).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsOutput) Etcd() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.Etcd }).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsOutput) K8s() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.K8s }).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsOutput) K8sAggregator() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.K8sAggregator }).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsOutput) K8sServiceAccount() PEMEncodedKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedKey { return v.K8sServiceAccount }).(PEMEncodedKeyPtrOutput)
}

func (o CertsOutput) OS() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v Certs) *PEMEncodedCertificateAndKey { return v.OS }).(PEMEncodedCertificateAndKeyPtrOutput)
}

type CertsPtrOutput struct{ *pulumi.OutputState }

func (CertsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certs)(nil)).Elem()
}

func (o CertsPtrOutput) ToCertsPtrOutput() CertsPtrOutput {
	return o
}

func (o CertsPtrOutput) ToCertsPtrOutputWithContext(ctx context.Context) CertsPtrOutput {
	return o
}

func (o CertsPtrOutput) Elem() CertsOutput {
	return o.ApplyT(func(v *Certs) Certs {
		if v != nil {
			return *v
		}
		var ret Certs
		return ret
	}).(CertsOutput)
}

func (o CertsPtrOutput) Admin() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.Admin
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsPtrOutput) Etcd() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.Etcd
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsPtrOutput) K8s() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.K8s
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsPtrOutput) K8sAggregator() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.K8sAggregator
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o CertsPtrOutput) K8sServiceAccount() PEMEncodedKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedKey {
		if v == nil {
			return nil
		}
		return v.K8sServiceAccount
	}).(PEMEncodedKeyPtrOutput)
}

func (o CertsPtrOutput) OS() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyT(func(v *Certs) *PEMEncodedCertificateAndKey {
		if v == nil {
			return nil
		}
		return v.OS
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

// Talos Cluster type
type Cluster struct {
	Id     *string `pulumi:"Id"`
	Secret *string `pulumi:"Secret"`
}

// ClusterInput is an input type that accepts ClusterArgs and ClusterOutput values.
// You can construct a concrete instance of `ClusterInput` via:
//
//          ClusterArgs{...}
type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(context.Context) ClusterOutput
}

// Talos Cluster type
type ClusterArgs struct {
	Id     pulumi.StringPtrInput `pulumi:"Id"`
	Secret pulumi.StringPtrInput `pulumi:"Secret"`
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (i ClusterArgs) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i ClusterArgs) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

func (i ClusterArgs) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i ClusterArgs) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput).ToClusterPtrOutputWithContext(ctx)
}

// ClusterPtrInput is an input type that accepts ClusterArgs, ClusterPtr and ClusterPtrOutput values.
// You can construct a concrete instance of `ClusterPtrInput` via:
//
//          ClusterArgs{...}
//
//  or:
//
//          nil
type ClusterPtrInput interface {
	pulumi.Input

	ToClusterPtrOutput() ClusterPtrOutput
	ToClusterPtrOutputWithContext(context.Context) ClusterPtrOutput
}

type clusterPtrType ClusterArgs

func ClusterPtr(v *ClusterArgs) ClusterPtrInput {
	return (*clusterPtrType)(v)
}

func (*clusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *clusterPtrType) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i *clusterPtrType) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPtrOutput)
}

// Talos Cluster type
type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o.ToClusterPtrOutputWithContext(context.Background())
}

func (o ClusterOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Cluster) *Cluster {
		return &v
	}).(ClusterPtrOutput)
}

func (o ClusterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cluster) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cluster) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type ClusterPtrOutput struct{ *pulumi.OutputState }

func (ClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterPtrOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) Elem() ClusterOutput {
	return o.ApplyT(func(v *Cluster) Cluster {
		if v != nil {
			return *v
		}
		var ret Cluster
		return ret
	}).(ClusterOutput)
}

func (o ClusterPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o ClusterPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// patches applied to the config
type ConfigPatches struct {
	// patches specified as pulumi file assets
	PatchFiles []pulumi.AssetOrArchive `pulumi:"patchFiles"`
	// patches specified as a pulumi map
	Patches []interface{} `pulumi:"patches"`
}

// ConfigPatchesInput is an input type that accepts ConfigPatchesArgs and ConfigPatchesOutput values.
// You can construct a concrete instance of `ConfigPatchesInput` via:
//
//          ConfigPatchesArgs{...}
type ConfigPatchesInput interface {
	pulumi.Input

	ToConfigPatchesOutput() ConfigPatchesOutput
	ToConfigPatchesOutputWithContext(context.Context) ConfigPatchesOutput
}

// patches applied to the config
type ConfigPatchesArgs struct {
	// patches specified as pulumi file assets
	PatchFiles pulumi.AssetOrArchiveArrayInput `pulumi:"patchFiles"`
	// patches specified as a pulumi map
	Patches pulumi.ArrayInput `pulumi:"patches"`
}

func (ConfigPatchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigPatches)(nil)).Elem()
}

func (i ConfigPatchesArgs) ToConfigPatchesOutput() ConfigPatchesOutput {
	return i.ToConfigPatchesOutputWithContext(context.Background())
}

func (i ConfigPatchesArgs) ToConfigPatchesOutputWithContext(ctx context.Context) ConfigPatchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigPatchesOutput)
}

func (i ConfigPatchesArgs) ToConfigPatchesPtrOutput() ConfigPatchesPtrOutput {
	return i.ToConfigPatchesPtrOutputWithContext(context.Background())
}

func (i ConfigPatchesArgs) ToConfigPatchesPtrOutputWithContext(ctx context.Context) ConfigPatchesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigPatchesOutput).ToConfigPatchesPtrOutputWithContext(ctx)
}

// ConfigPatchesPtrInput is an input type that accepts ConfigPatchesArgs, ConfigPatchesPtr and ConfigPatchesPtrOutput values.
// You can construct a concrete instance of `ConfigPatchesPtrInput` via:
//
//          ConfigPatchesArgs{...}
//
//  or:
//
//          nil
type ConfigPatchesPtrInput interface {
	pulumi.Input

	ToConfigPatchesPtrOutput() ConfigPatchesPtrOutput
	ToConfigPatchesPtrOutputWithContext(context.Context) ConfigPatchesPtrOutput
}

type configPatchesPtrType ConfigPatchesArgs

func ConfigPatchesPtr(v *ConfigPatchesArgs) ConfigPatchesPtrInput {
	return (*configPatchesPtrType)(v)
}

func (*configPatchesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigPatches)(nil)).Elem()
}

func (i *configPatchesPtrType) ToConfigPatchesPtrOutput() ConfigPatchesPtrOutput {
	return i.ToConfigPatchesPtrOutputWithContext(context.Background())
}

func (i *configPatchesPtrType) ToConfigPatchesPtrOutputWithContext(ctx context.Context) ConfigPatchesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigPatchesPtrOutput)
}

// patches applied to the config
type ConfigPatchesOutput struct{ *pulumi.OutputState }

func (ConfigPatchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigPatches)(nil)).Elem()
}

func (o ConfigPatchesOutput) ToConfigPatchesOutput() ConfigPatchesOutput {
	return o
}

func (o ConfigPatchesOutput) ToConfigPatchesOutputWithContext(ctx context.Context) ConfigPatchesOutput {
	return o
}

func (o ConfigPatchesOutput) ToConfigPatchesPtrOutput() ConfigPatchesPtrOutput {
	return o.ToConfigPatchesPtrOutputWithContext(context.Background())
}

func (o ConfigPatchesOutput) ToConfigPatchesPtrOutputWithContext(ctx context.Context) ConfigPatchesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigPatches) *ConfigPatches {
		return &v
	}).(ConfigPatchesPtrOutput)
}

// patches specified as pulumi file assets
func (o ConfigPatchesOutput) PatchFiles() pulumi.AssetOrArchiveArrayOutput {
	return o.ApplyT(func(v ConfigPatches) []pulumi.AssetOrArchive { return v.PatchFiles }).(pulumi.AssetOrArchiveArrayOutput)
}

// patches specified as a pulumi map
func (o ConfigPatchesOutput) Patches() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConfigPatches) []interface{} { return v.Patches }).(pulumi.ArrayOutput)
}

type ConfigPatchesPtrOutput struct{ *pulumi.OutputState }

func (ConfigPatchesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigPatches)(nil)).Elem()
}

func (o ConfigPatchesPtrOutput) ToConfigPatchesPtrOutput() ConfigPatchesPtrOutput {
	return o
}

func (o ConfigPatchesPtrOutput) ToConfigPatchesPtrOutputWithContext(ctx context.Context) ConfigPatchesPtrOutput {
	return o
}

func (o ConfigPatchesPtrOutput) Elem() ConfigPatchesOutput {
	return o.ApplyT(func(v *ConfigPatches) ConfigPatches {
		if v != nil {
			return *v
		}
		var ret ConfigPatches
		return ret
	}).(ConfigPatchesOutput)
}

// patches specified as pulumi file assets
func (o ConfigPatchesPtrOutput) PatchFiles() pulumi.AssetOrArchiveArrayOutput {
	return o.ApplyT(func(v *ConfigPatches) []pulumi.AssetOrArchive {
		if v == nil {
			return nil
		}
		return v.PatchFiles
	}).(pulumi.AssetOrArchiveArrayOutput)
}

// patches specified as a pulumi map
func (o ConfigPatchesPtrOutput) Patches() pulumi.ArrayOutput {
	return o.ApplyT(func(v *ConfigPatches) []interface{} {
		if v == nil {
			return nil
		}
		return v.Patches
	}).(pulumi.ArrayOutput)
}

// Talos PEMEncodedCertificateAndKey type
type PEMEncodedCertificateAndKey struct {
	Crt interface{} `pulumi:"Crt"`
	Key interface{} `pulumi:"Key"`
}

// PEMEncodedCertificateAndKeyInput is an input type that accepts PEMEncodedCertificateAndKeyArgs and PEMEncodedCertificateAndKeyOutput values.
// You can construct a concrete instance of `PEMEncodedCertificateAndKeyInput` via:
//
//          PEMEncodedCertificateAndKeyArgs{...}
type PEMEncodedCertificateAndKeyInput interface {
	pulumi.Input

	ToPEMEncodedCertificateAndKeyOutput() PEMEncodedCertificateAndKeyOutput
	ToPEMEncodedCertificateAndKeyOutputWithContext(context.Context) PEMEncodedCertificateAndKeyOutput
}

// Talos PEMEncodedCertificateAndKey type
type PEMEncodedCertificateAndKeyArgs struct {
	Crt pulumi.Input `pulumi:"Crt"`
	Key pulumi.Input `pulumi:"Key"`
}

func (PEMEncodedCertificateAndKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PEMEncodedCertificateAndKey)(nil)).Elem()
}

func (i PEMEncodedCertificateAndKeyArgs) ToPEMEncodedCertificateAndKeyOutput() PEMEncodedCertificateAndKeyOutput {
	return i.ToPEMEncodedCertificateAndKeyOutputWithContext(context.Background())
}

func (i PEMEncodedCertificateAndKeyArgs) ToPEMEncodedCertificateAndKeyOutputWithContext(ctx context.Context) PEMEncodedCertificateAndKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PEMEncodedCertificateAndKeyOutput)
}

func (i PEMEncodedCertificateAndKeyArgs) ToPEMEncodedCertificateAndKeyPtrOutput() PEMEncodedCertificateAndKeyPtrOutput {
	return i.ToPEMEncodedCertificateAndKeyPtrOutputWithContext(context.Background())
}

func (i PEMEncodedCertificateAndKeyArgs) ToPEMEncodedCertificateAndKeyPtrOutputWithContext(ctx context.Context) PEMEncodedCertificateAndKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PEMEncodedCertificateAndKeyOutput).ToPEMEncodedCertificateAndKeyPtrOutputWithContext(ctx)
}

// PEMEncodedCertificateAndKeyPtrInput is an input type that accepts PEMEncodedCertificateAndKeyArgs, PEMEncodedCertificateAndKeyPtr and PEMEncodedCertificateAndKeyPtrOutput values.
// You can construct a concrete instance of `PEMEncodedCertificateAndKeyPtrInput` via:
//
//          PEMEncodedCertificateAndKeyArgs{...}
//
//  or:
//
//          nil
type PEMEncodedCertificateAndKeyPtrInput interface {
	pulumi.Input

	ToPEMEncodedCertificateAndKeyPtrOutput() PEMEncodedCertificateAndKeyPtrOutput
	ToPEMEncodedCertificateAndKeyPtrOutputWithContext(context.Context) PEMEncodedCertificateAndKeyPtrOutput
}

type pemencodedCertificateAndKeyPtrType PEMEncodedCertificateAndKeyArgs

func PEMEncodedCertificateAndKeyPtr(v *PEMEncodedCertificateAndKeyArgs) PEMEncodedCertificateAndKeyPtrInput {
	return (*pemencodedCertificateAndKeyPtrType)(v)
}

func (*pemencodedCertificateAndKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PEMEncodedCertificateAndKey)(nil)).Elem()
}

func (i *pemencodedCertificateAndKeyPtrType) ToPEMEncodedCertificateAndKeyPtrOutput() PEMEncodedCertificateAndKeyPtrOutput {
	return i.ToPEMEncodedCertificateAndKeyPtrOutputWithContext(context.Background())
}

func (i *pemencodedCertificateAndKeyPtrType) ToPEMEncodedCertificateAndKeyPtrOutputWithContext(ctx context.Context) PEMEncodedCertificateAndKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PEMEncodedCertificateAndKeyPtrOutput)
}

// Talos PEMEncodedCertificateAndKey type
type PEMEncodedCertificateAndKeyOutput struct{ *pulumi.OutputState }

func (PEMEncodedCertificateAndKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PEMEncodedCertificateAndKey)(nil)).Elem()
}

func (o PEMEncodedCertificateAndKeyOutput) ToPEMEncodedCertificateAndKeyOutput() PEMEncodedCertificateAndKeyOutput {
	return o
}

func (o PEMEncodedCertificateAndKeyOutput) ToPEMEncodedCertificateAndKeyOutputWithContext(ctx context.Context) PEMEncodedCertificateAndKeyOutput {
	return o
}

func (o PEMEncodedCertificateAndKeyOutput) ToPEMEncodedCertificateAndKeyPtrOutput() PEMEncodedCertificateAndKeyPtrOutput {
	return o.ToPEMEncodedCertificateAndKeyPtrOutputWithContext(context.Background())
}

func (o PEMEncodedCertificateAndKeyOutput) ToPEMEncodedCertificateAndKeyPtrOutputWithContext(ctx context.Context) PEMEncodedCertificateAndKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PEMEncodedCertificateAndKey) *PEMEncodedCertificateAndKey {
		return &v
	}).(PEMEncodedCertificateAndKeyPtrOutput)
}

func (o PEMEncodedCertificateAndKeyOutput) Crt() pulumi.AnyOutput {
	return o.ApplyT(func(v PEMEncodedCertificateAndKey) interface{} { return v.Crt }).(pulumi.AnyOutput)
}

func (o PEMEncodedCertificateAndKeyOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v PEMEncodedCertificateAndKey) interface{} { return v.Key }).(pulumi.AnyOutput)
}

type PEMEncodedCertificateAndKeyPtrOutput struct{ *pulumi.OutputState }

func (PEMEncodedCertificateAndKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PEMEncodedCertificateAndKey)(nil)).Elem()
}

func (o PEMEncodedCertificateAndKeyPtrOutput) ToPEMEncodedCertificateAndKeyPtrOutput() PEMEncodedCertificateAndKeyPtrOutput {
	return o
}

func (o PEMEncodedCertificateAndKeyPtrOutput) ToPEMEncodedCertificateAndKeyPtrOutputWithContext(ctx context.Context) PEMEncodedCertificateAndKeyPtrOutput {
	return o
}

func (o PEMEncodedCertificateAndKeyPtrOutput) Elem() PEMEncodedCertificateAndKeyOutput {
	return o.ApplyT(func(v *PEMEncodedCertificateAndKey) PEMEncodedCertificateAndKey {
		if v != nil {
			return *v
		}
		var ret PEMEncodedCertificateAndKey
		return ret
	}).(PEMEncodedCertificateAndKeyOutput)
}

func (o PEMEncodedCertificateAndKeyPtrOutput) Crt() pulumi.AnyOutput {
	return o.ApplyT(func(v *PEMEncodedCertificateAndKey) interface{} {
		if v == nil {
			return nil
		}
		return v.Crt
	}).(pulumi.AnyOutput)
}

func (o PEMEncodedCertificateAndKeyPtrOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v *PEMEncodedCertificateAndKey) interface{} {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.AnyOutput)
}

// Talos PEMEncodedKey type
type PEMEncodedKey struct {
	Key interface{} `pulumi:"Key"`
}

// PEMEncodedKeyInput is an input type that accepts PEMEncodedKeyArgs and PEMEncodedKeyOutput values.
// You can construct a concrete instance of `PEMEncodedKeyInput` via:
//
//          PEMEncodedKeyArgs{...}
type PEMEncodedKeyInput interface {
	pulumi.Input

	ToPEMEncodedKeyOutput() PEMEncodedKeyOutput
	ToPEMEncodedKeyOutputWithContext(context.Context) PEMEncodedKeyOutput
}

// Talos PEMEncodedKey type
type PEMEncodedKeyArgs struct {
	Key pulumi.Input `pulumi:"Key"`
}

func (PEMEncodedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PEMEncodedKey)(nil)).Elem()
}

func (i PEMEncodedKeyArgs) ToPEMEncodedKeyOutput() PEMEncodedKeyOutput {
	return i.ToPEMEncodedKeyOutputWithContext(context.Background())
}

func (i PEMEncodedKeyArgs) ToPEMEncodedKeyOutputWithContext(ctx context.Context) PEMEncodedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PEMEncodedKeyOutput)
}

func (i PEMEncodedKeyArgs) ToPEMEncodedKeyPtrOutput() PEMEncodedKeyPtrOutput {
	return i.ToPEMEncodedKeyPtrOutputWithContext(context.Background())
}

func (i PEMEncodedKeyArgs) ToPEMEncodedKeyPtrOutputWithContext(ctx context.Context) PEMEncodedKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PEMEncodedKeyOutput).ToPEMEncodedKeyPtrOutputWithContext(ctx)
}

// PEMEncodedKeyPtrInput is an input type that accepts PEMEncodedKeyArgs, PEMEncodedKeyPtr and PEMEncodedKeyPtrOutput values.
// You can construct a concrete instance of `PEMEncodedKeyPtrInput` via:
//
//          PEMEncodedKeyArgs{...}
//
//  or:
//
//          nil
type PEMEncodedKeyPtrInput interface {
	pulumi.Input

	ToPEMEncodedKeyPtrOutput() PEMEncodedKeyPtrOutput
	ToPEMEncodedKeyPtrOutputWithContext(context.Context) PEMEncodedKeyPtrOutput
}

type pemencodedKeyPtrType PEMEncodedKeyArgs

func PEMEncodedKeyPtr(v *PEMEncodedKeyArgs) PEMEncodedKeyPtrInput {
	return (*pemencodedKeyPtrType)(v)
}

func (*pemencodedKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PEMEncodedKey)(nil)).Elem()
}

func (i *pemencodedKeyPtrType) ToPEMEncodedKeyPtrOutput() PEMEncodedKeyPtrOutput {
	return i.ToPEMEncodedKeyPtrOutputWithContext(context.Background())
}

func (i *pemencodedKeyPtrType) ToPEMEncodedKeyPtrOutputWithContext(ctx context.Context) PEMEncodedKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PEMEncodedKeyPtrOutput)
}

// Talos PEMEncodedKey type
type PEMEncodedKeyOutput struct{ *pulumi.OutputState }

func (PEMEncodedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PEMEncodedKey)(nil)).Elem()
}

func (o PEMEncodedKeyOutput) ToPEMEncodedKeyOutput() PEMEncodedKeyOutput {
	return o
}

func (o PEMEncodedKeyOutput) ToPEMEncodedKeyOutputWithContext(ctx context.Context) PEMEncodedKeyOutput {
	return o
}

func (o PEMEncodedKeyOutput) ToPEMEncodedKeyPtrOutput() PEMEncodedKeyPtrOutput {
	return o.ToPEMEncodedKeyPtrOutputWithContext(context.Background())
}

func (o PEMEncodedKeyOutput) ToPEMEncodedKeyPtrOutputWithContext(ctx context.Context) PEMEncodedKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PEMEncodedKey) *PEMEncodedKey {
		return &v
	}).(PEMEncodedKeyPtrOutput)
}

func (o PEMEncodedKeyOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v PEMEncodedKey) interface{} { return v.Key }).(pulumi.AnyOutput)
}

type PEMEncodedKeyPtrOutput struct{ *pulumi.OutputState }

func (PEMEncodedKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PEMEncodedKey)(nil)).Elem()
}

func (o PEMEncodedKeyPtrOutput) ToPEMEncodedKeyPtrOutput() PEMEncodedKeyPtrOutput {
	return o
}

func (o PEMEncodedKeyPtrOutput) ToPEMEncodedKeyPtrOutputWithContext(ctx context.Context) PEMEncodedKeyPtrOutput {
	return o
}

func (o PEMEncodedKeyPtrOutput) Elem() PEMEncodedKeyOutput {
	return o.ApplyT(func(v *PEMEncodedKey) PEMEncodedKey {
		if v != nil {
			return *v
		}
		var ret PEMEncodedKey
		return ret
	}).(PEMEncodedKeyOutput)
}

func (o PEMEncodedKeyPtrOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v *PEMEncodedKey) interface{} {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.AnyOutput)
}

// Talos Secrets type
type Secrets struct {
	AESCBCEncryptionSecret *string `pulumi:"AESCBCEncryptionSecret"`
	BootstrapToken         *string `pulumi:"BootstrapToken"`
}

// SecretsInput is an input type that accepts SecretsArgs and SecretsOutput values.
// You can construct a concrete instance of `SecretsInput` via:
//
//          SecretsArgs{...}
type SecretsInput interface {
	pulumi.Input

	ToSecretsOutput() SecretsOutput
	ToSecretsOutputWithContext(context.Context) SecretsOutput
}

// Talos Secrets type
type SecretsArgs struct {
	AESCBCEncryptionSecret pulumi.StringPtrInput `pulumi:"AESCBCEncryptionSecret"`
	BootstrapToken         pulumi.StringPtrInput `pulumi:"BootstrapToken"`
}

func (SecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secrets)(nil)).Elem()
}

func (i SecretsArgs) ToSecretsOutput() SecretsOutput {
	return i.ToSecretsOutputWithContext(context.Background())
}

func (i SecretsArgs) ToSecretsOutputWithContext(ctx context.Context) SecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsOutput)
}

func (i SecretsArgs) ToSecretsPtrOutput() SecretsPtrOutput {
	return i.ToSecretsPtrOutputWithContext(context.Background())
}

func (i SecretsArgs) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsOutput).ToSecretsPtrOutputWithContext(ctx)
}

// SecretsPtrInput is an input type that accepts SecretsArgs, SecretsPtr and SecretsPtrOutput values.
// You can construct a concrete instance of `SecretsPtrInput` via:
//
//          SecretsArgs{...}
//
//  or:
//
//          nil
type SecretsPtrInput interface {
	pulumi.Input

	ToSecretsPtrOutput() SecretsPtrOutput
	ToSecretsPtrOutputWithContext(context.Context) SecretsPtrOutput
}

type secretsPtrType SecretsArgs

func SecretsPtr(v *SecretsArgs) SecretsPtrInput {
	return (*secretsPtrType)(v)
}

func (*secretsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Secrets)(nil)).Elem()
}

func (i *secretsPtrType) ToSecretsPtrOutput() SecretsPtrOutput {
	return i.ToSecretsPtrOutputWithContext(context.Background())
}

func (i *secretsPtrType) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsPtrOutput)
}

// Talos Secrets type
type SecretsOutput struct{ *pulumi.OutputState }

func (SecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secrets)(nil)).Elem()
}

func (o SecretsOutput) ToSecretsOutput() SecretsOutput {
	return o
}

func (o SecretsOutput) ToSecretsOutputWithContext(ctx context.Context) SecretsOutput {
	return o
}

func (o SecretsOutput) ToSecretsPtrOutput() SecretsPtrOutput {
	return o.ToSecretsPtrOutputWithContext(context.Background())
}

func (o SecretsOutput) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Secrets) *Secrets {
		return &v
	}).(SecretsPtrOutput)
}

func (o SecretsOutput) AESCBCEncryptionSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secrets) *string { return v.AESCBCEncryptionSecret }).(pulumi.StringPtrOutput)
}

func (o SecretsOutput) BootstrapToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secrets) *string { return v.BootstrapToken }).(pulumi.StringPtrOutput)
}

type SecretsPtrOutput struct{ *pulumi.OutputState }

func (SecretsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secrets)(nil)).Elem()
}

func (o SecretsPtrOutput) ToSecretsPtrOutput() SecretsPtrOutput {
	return o
}

func (o SecretsPtrOutput) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return o
}

func (o SecretsPtrOutput) Elem() SecretsOutput {
	return o.ApplyT(func(v *Secrets) Secrets {
		if v != nil {
			return *v
		}
		var ret Secrets
		return ret
	}).(SecretsOutput)
}

func (o SecretsPtrOutput) AESCBCEncryptionSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secrets) *string {
		if v == nil {
			return nil
		}
		return v.AESCBCEncryptionSecret
	}).(pulumi.StringPtrOutput)
}

func (o SecretsPtrOutput) BootstrapToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secrets) *string {
		if v == nil {
			return nil
		}
		return v.BootstrapToken
	}).(pulumi.StringPtrOutput)
}

// Talos SecretsBundle type
type SecretsBundle struct {
	Certs      *Certs      `pulumi:"Certs"`
	Cluster    *Cluster    `pulumi:"Cluster"`
	Secrets    *Secrets    `pulumi:"Secrets"`
	TrustdInfo *TrustdInfo `pulumi:"TrustdInfo"`
}

// SecretsBundleInput is an input type that accepts SecretsBundleArgs and SecretsBundleOutput values.
// You can construct a concrete instance of `SecretsBundleInput` via:
//
//          SecretsBundleArgs{...}
type SecretsBundleInput interface {
	pulumi.Input

	ToSecretsBundleOutput() SecretsBundleOutput
	ToSecretsBundleOutputWithContext(context.Context) SecretsBundleOutput
}

// Talos SecretsBundle type
type SecretsBundleArgs struct {
	Certs      CertsPtrInput      `pulumi:"Certs"`
	Cluster    ClusterPtrInput    `pulumi:"Cluster"`
	Secrets    SecretsPtrInput    `pulumi:"Secrets"`
	TrustdInfo TrustdInfoPtrInput `pulumi:"TrustdInfo"`
}

func (SecretsBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsBundle)(nil)).Elem()
}

func (i SecretsBundleArgs) ToSecretsBundleOutput() SecretsBundleOutput {
	return i.ToSecretsBundleOutputWithContext(context.Background())
}

func (i SecretsBundleArgs) ToSecretsBundleOutputWithContext(ctx context.Context) SecretsBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsBundleOutput)
}

// Talos SecretsBundle type
type SecretsBundleOutput struct{ *pulumi.OutputState }

func (SecretsBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsBundle)(nil)).Elem()
}

func (o SecretsBundleOutput) ToSecretsBundleOutput() SecretsBundleOutput {
	return o
}

func (o SecretsBundleOutput) ToSecretsBundleOutputWithContext(ctx context.Context) SecretsBundleOutput {
	return o
}

func (o SecretsBundleOutput) Certs() CertsPtrOutput {
	return o.ApplyT(func(v SecretsBundle) *Certs { return v.Certs }).(CertsPtrOutput)
}

func (o SecretsBundleOutput) Cluster() ClusterPtrOutput {
	return o.ApplyT(func(v SecretsBundle) *Cluster { return v.Cluster }).(ClusterPtrOutput)
}

func (o SecretsBundleOutput) Secrets() SecretsPtrOutput {
	return o.ApplyT(func(v SecretsBundle) *Secrets { return v.Secrets }).(SecretsPtrOutput)
}

func (o SecretsBundleOutput) TrustdInfo() TrustdInfoPtrOutput {
	return o.ApplyT(func(v SecretsBundle) *TrustdInfo { return v.TrustdInfo }).(TrustdInfoPtrOutput)
}

// Talos Machine Configuration Version
type TalosMachineConfigVersionOutputType struct {
}

// TalosMachineConfigVersionOutputTypeInput is an input type that accepts TalosMachineConfigVersionOutputTypeArgs and TalosMachineConfigVersionOutputTypeOutput values.
// You can construct a concrete instance of `TalosMachineConfigVersionOutputTypeInput` via:
//
//          TalosMachineConfigVersionOutputTypeArgs{...}
type TalosMachineConfigVersionOutputTypeInput interface {
	pulumi.Input

	ToTalosMachineConfigVersionOutputTypeOutput() TalosMachineConfigVersionOutputTypeOutput
	ToTalosMachineConfigVersionOutputTypeOutputWithContext(context.Context) TalosMachineConfigVersionOutputTypeOutput
}

// Talos Machine Configuration Version
type TalosMachineConfigVersionOutputTypeArgs struct {
}

func (TalosMachineConfigVersionOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TalosMachineConfigVersionOutputType)(nil)).Elem()
}

func (i TalosMachineConfigVersionOutputTypeArgs) ToTalosMachineConfigVersionOutputTypeOutput() TalosMachineConfigVersionOutputTypeOutput {
	return i.ToTalosMachineConfigVersionOutputTypeOutputWithContext(context.Background())
}

func (i TalosMachineConfigVersionOutputTypeArgs) ToTalosMachineConfigVersionOutputTypeOutputWithContext(ctx context.Context) TalosMachineConfigVersionOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TalosMachineConfigVersionOutputTypeOutput)
}

func (i TalosMachineConfigVersionOutputTypeArgs) ToTalosMachineConfigVersionOutputTypePtrOutput() TalosMachineConfigVersionOutputTypePtrOutput {
	return i.ToTalosMachineConfigVersionOutputTypePtrOutputWithContext(context.Background())
}

func (i TalosMachineConfigVersionOutputTypeArgs) ToTalosMachineConfigVersionOutputTypePtrOutputWithContext(ctx context.Context) TalosMachineConfigVersionOutputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TalosMachineConfigVersionOutputTypeOutput).ToTalosMachineConfigVersionOutputTypePtrOutputWithContext(ctx)
}

// TalosMachineConfigVersionOutputTypePtrInput is an input type that accepts TalosMachineConfigVersionOutputTypeArgs, TalosMachineConfigVersionOutputTypePtr and TalosMachineConfigVersionOutputTypePtrOutput values.
// You can construct a concrete instance of `TalosMachineConfigVersionOutputTypePtrInput` via:
//
//          TalosMachineConfigVersionOutputTypeArgs{...}
//
//  or:
//
//          nil
type TalosMachineConfigVersionOutputTypePtrInput interface {
	pulumi.Input

	ToTalosMachineConfigVersionOutputTypePtrOutput() TalosMachineConfigVersionOutputTypePtrOutput
	ToTalosMachineConfigVersionOutputTypePtrOutputWithContext(context.Context) TalosMachineConfigVersionOutputTypePtrOutput
}

type talosMachineConfigVersionOutputTypePtrType TalosMachineConfigVersionOutputTypeArgs

func TalosMachineConfigVersionOutputTypePtr(v *TalosMachineConfigVersionOutputTypeArgs) TalosMachineConfigVersionOutputTypePtrInput {
	return (*talosMachineConfigVersionOutputTypePtrType)(v)
}

func (*talosMachineConfigVersionOutputTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TalosMachineConfigVersionOutputType)(nil)).Elem()
}

func (i *talosMachineConfigVersionOutputTypePtrType) ToTalosMachineConfigVersionOutputTypePtrOutput() TalosMachineConfigVersionOutputTypePtrOutput {
	return i.ToTalosMachineConfigVersionOutputTypePtrOutputWithContext(context.Background())
}

func (i *talosMachineConfigVersionOutputTypePtrType) ToTalosMachineConfigVersionOutputTypePtrOutputWithContext(ctx context.Context) TalosMachineConfigVersionOutputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TalosMachineConfigVersionOutputTypePtrOutput)
}

// Talos Machine Configuration Version
type TalosMachineConfigVersionOutputTypeOutput struct{ *pulumi.OutputState }

func (TalosMachineConfigVersionOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TalosMachineConfigVersionOutputType)(nil)).Elem()
}

func (o TalosMachineConfigVersionOutputTypeOutput) ToTalosMachineConfigVersionOutputTypeOutput() TalosMachineConfigVersionOutputTypeOutput {
	return o
}

func (o TalosMachineConfigVersionOutputTypeOutput) ToTalosMachineConfigVersionOutputTypeOutputWithContext(ctx context.Context) TalosMachineConfigVersionOutputTypeOutput {
	return o
}

func (o TalosMachineConfigVersionOutputTypeOutput) ToTalosMachineConfigVersionOutputTypePtrOutput() TalosMachineConfigVersionOutputTypePtrOutput {
	return o.ToTalosMachineConfigVersionOutputTypePtrOutputWithContext(context.Background())
}

func (o TalosMachineConfigVersionOutputTypeOutput) ToTalosMachineConfigVersionOutputTypePtrOutputWithContext(ctx context.Context) TalosMachineConfigVersionOutputTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TalosMachineConfigVersionOutputType) *TalosMachineConfigVersionOutputType {
		return &v
	}).(TalosMachineConfigVersionOutputTypePtrOutput)
}

type TalosMachineConfigVersionOutputTypePtrOutput struct{ *pulumi.OutputState }

func (TalosMachineConfigVersionOutputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TalosMachineConfigVersionOutputType)(nil)).Elem()
}

func (o TalosMachineConfigVersionOutputTypePtrOutput) ToTalosMachineConfigVersionOutputTypePtrOutput() TalosMachineConfigVersionOutputTypePtrOutput {
	return o
}

func (o TalosMachineConfigVersionOutputTypePtrOutput) ToTalosMachineConfigVersionOutputTypePtrOutputWithContext(ctx context.Context) TalosMachineConfigVersionOutputTypePtrOutput {
	return o
}

func (o TalosMachineConfigVersionOutputTypePtrOutput) Elem() TalosMachineConfigVersionOutputTypeOutput {
	return o.ApplyT(func(v *TalosMachineConfigVersionOutputType) TalosMachineConfigVersionOutputType {
		if v != nil {
			return *v
		}
		var ret TalosMachineConfigVersionOutputType
		return ret
	}).(TalosMachineConfigVersionOutputTypeOutput)
}

// Talos Version
type TalosVersionOutput struct {
}

// TalosVersionOutputInput is an input type that accepts TalosVersionOutputArgs and TalosVersionOutputOutput values.
// You can construct a concrete instance of `TalosVersionOutputInput` via:
//
//          TalosVersionOutputArgs{...}
type TalosVersionOutputInput interface {
	pulumi.Input

	ToTalosVersionOutputOutput() TalosVersionOutputOutput
	ToTalosVersionOutputOutputWithContext(context.Context) TalosVersionOutputOutput
}

// Talos Version
type TalosVersionOutputArgs struct {
}

func (TalosVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TalosVersionOutput)(nil)).Elem()
}

func (i TalosVersionOutputArgs) ToTalosVersionOutputOutput() TalosVersionOutputOutput {
	return i.ToTalosVersionOutputOutputWithContext(context.Background())
}

func (i TalosVersionOutputArgs) ToTalosVersionOutputOutputWithContext(ctx context.Context) TalosVersionOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TalosVersionOutputOutput)
}

func (i TalosVersionOutputArgs) ToTalosVersionOutputPtrOutput() TalosVersionOutputPtrOutput {
	return i.ToTalosVersionOutputPtrOutputWithContext(context.Background())
}

func (i TalosVersionOutputArgs) ToTalosVersionOutputPtrOutputWithContext(ctx context.Context) TalosVersionOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TalosVersionOutputOutput).ToTalosVersionOutputPtrOutputWithContext(ctx)
}

// TalosVersionOutputPtrInput is an input type that accepts TalosVersionOutputArgs, TalosVersionOutputPtr and TalosVersionOutputPtrOutput values.
// You can construct a concrete instance of `TalosVersionOutputPtrInput` via:
//
//          TalosVersionOutputArgs{...}
//
//  or:
//
//          nil
type TalosVersionOutputPtrInput interface {
	pulumi.Input

	ToTalosVersionOutputPtrOutput() TalosVersionOutputPtrOutput
	ToTalosVersionOutputPtrOutputWithContext(context.Context) TalosVersionOutputPtrOutput
}

type talosVersionOutputPtrType TalosVersionOutputArgs

func TalosVersionOutputPtr(v *TalosVersionOutputArgs) TalosVersionOutputPtrInput {
	return (*talosVersionOutputPtrType)(v)
}

func (*talosVersionOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TalosVersionOutput)(nil)).Elem()
}

func (i *talosVersionOutputPtrType) ToTalosVersionOutputPtrOutput() TalosVersionOutputPtrOutput {
	return i.ToTalosVersionOutputPtrOutputWithContext(context.Background())
}

func (i *talosVersionOutputPtrType) ToTalosVersionOutputPtrOutputWithContext(ctx context.Context) TalosVersionOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TalosVersionOutputPtrOutput)
}

// Talos Version
type TalosVersionOutputOutput struct{ *pulumi.OutputState }

func (TalosVersionOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TalosVersionOutput)(nil)).Elem()
}

func (o TalosVersionOutputOutput) ToTalosVersionOutputOutput() TalosVersionOutputOutput {
	return o
}

func (o TalosVersionOutputOutput) ToTalosVersionOutputOutputWithContext(ctx context.Context) TalosVersionOutputOutput {
	return o
}

func (o TalosVersionOutputOutput) ToTalosVersionOutputPtrOutput() TalosVersionOutputPtrOutput {
	return o.ToTalosVersionOutputPtrOutputWithContext(context.Background())
}

func (o TalosVersionOutputOutput) ToTalosVersionOutputPtrOutputWithContext(ctx context.Context) TalosVersionOutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TalosVersionOutput) *TalosVersionOutput {
		return &v
	}).(TalosVersionOutputPtrOutput)
}

type TalosVersionOutputPtrOutput struct{ *pulumi.OutputState }

func (TalosVersionOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TalosVersionOutput)(nil)).Elem()
}

func (o TalosVersionOutputPtrOutput) ToTalosVersionOutputPtrOutput() TalosVersionOutputPtrOutput {
	return o
}

func (o TalosVersionOutputPtrOutput) ToTalosVersionOutputPtrOutputWithContext(ctx context.Context) TalosVersionOutputPtrOutput {
	return o
}

func (o TalosVersionOutputPtrOutput) Elem() TalosVersionOutputOutput {
	return o.ApplyT(func(v *TalosVersionOutput) TalosVersionOutput {
		if v != nil {
			return *v
		}
		var ret TalosVersionOutput
		return ret
	}).(TalosVersionOutputOutput)
}

// Talos TrustdInfo type
type TrustdInfo struct {
	Token *string `pulumi:"Token"`
}

// TrustdInfoInput is an input type that accepts TrustdInfoArgs and TrustdInfoOutput values.
// You can construct a concrete instance of `TrustdInfoInput` via:
//
//          TrustdInfoArgs{...}
type TrustdInfoInput interface {
	pulumi.Input

	ToTrustdInfoOutput() TrustdInfoOutput
	ToTrustdInfoOutputWithContext(context.Context) TrustdInfoOutput
}

// Talos TrustdInfo type
type TrustdInfoArgs struct {
	Token pulumi.StringPtrInput `pulumi:"Token"`
}

func (TrustdInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustdInfo)(nil)).Elem()
}

func (i TrustdInfoArgs) ToTrustdInfoOutput() TrustdInfoOutput {
	return i.ToTrustdInfoOutputWithContext(context.Background())
}

func (i TrustdInfoArgs) ToTrustdInfoOutputWithContext(ctx context.Context) TrustdInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustdInfoOutput)
}

func (i TrustdInfoArgs) ToTrustdInfoPtrOutput() TrustdInfoPtrOutput {
	return i.ToTrustdInfoPtrOutputWithContext(context.Background())
}

func (i TrustdInfoArgs) ToTrustdInfoPtrOutputWithContext(ctx context.Context) TrustdInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustdInfoOutput).ToTrustdInfoPtrOutputWithContext(ctx)
}

// TrustdInfoPtrInput is an input type that accepts TrustdInfoArgs, TrustdInfoPtr and TrustdInfoPtrOutput values.
// You can construct a concrete instance of `TrustdInfoPtrInput` via:
//
//          TrustdInfoArgs{...}
//
//  or:
//
//          nil
type TrustdInfoPtrInput interface {
	pulumi.Input

	ToTrustdInfoPtrOutput() TrustdInfoPtrOutput
	ToTrustdInfoPtrOutputWithContext(context.Context) TrustdInfoPtrOutput
}

type trustdInfoPtrType TrustdInfoArgs

func TrustdInfoPtr(v *TrustdInfoArgs) TrustdInfoPtrInput {
	return (*trustdInfoPtrType)(v)
}

func (*trustdInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustdInfo)(nil)).Elem()
}

func (i *trustdInfoPtrType) ToTrustdInfoPtrOutput() TrustdInfoPtrOutput {
	return i.ToTrustdInfoPtrOutputWithContext(context.Background())
}

func (i *trustdInfoPtrType) ToTrustdInfoPtrOutputWithContext(ctx context.Context) TrustdInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustdInfoPtrOutput)
}

// Talos TrustdInfo type
type TrustdInfoOutput struct{ *pulumi.OutputState }

func (TrustdInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustdInfo)(nil)).Elem()
}

func (o TrustdInfoOutput) ToTrustdInfoOutput() TrustdInfoOutput {
	return o
}

func (o TrustdInfoOutput) ToTrustdInfoOutputWithContext(ctx context.Context) TrustdInfoOutput {
	return o
}

func (o TrustdInfoOutput) ToTrustdInfoPtrOutput() TrustdInfoPtrOutput {
	return o.ToTrustdInfoPtrOutputWithContext(context.Background())
}

func (o TrustdInfoOutput) ToTrustdInfoPtrOutputWithContext(ctx context.Context) TrustdInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrustdInfo) *TrustdInfo {
		return &v
	}).(TrustdInfoPtrOutput)
}

func (o TrustdInfoOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrustdInfo) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type TrustdInfoPtrOutput struct{ *pulumi.OutputState }

func (TrustdInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustdInfo)(nil)).Elem()
}

func (o TrustdInfoPtrOutput) ToTrustdInfoPtrOutput() TrustdInfoPtrOutput {
	return o
}

func (o TrustdInfoPtrOutput) ToTrustdInfoPtrOutputWithContext(ctx context.Context) TrustdInfoPtrOutput {
	return o
}

func (o TrustdInfoPtrOutput) Elem() TrustdInfoOutput {
	return o.ApplyT(func(v *TrustdInfo) TrustdInfo {
		if v != nil {
			return *v
		}
		var ret TrustdInfo
		return ret
	}).(TrustdInfoOutput)
}

func (o TrustdInfoPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrustdInfo) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertsInput)(nil)).Elem(), CertsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertsPtrInput)(nil)).Elem(), CertsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), ClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPtrInput)(nil)).Elem(), ClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigPatchesInput)(nil)).Elem(), ConfigPatchesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigPatchesPtrInput)(nil)).Elem(), ConfigPatchesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PEMEncodedCertificateAndKeyInput)(nil)).Elem(), PEMEncodedCertificateAndKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PEMEncodedCertificateAndKeyPtrInput)(nil)).Elem(), PEMEncodedCertificateAndKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PEMEncodedKeyInput)(nil)).Elem(), PEMEncodedKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PEMEncodedKeyPtrInput)(nil)).Elem(), PEMEncodedKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsInput)(nil)).Elem(), SecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsPtrInput)(nil)).Elem(), SecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsBundleInput)(nil)).Elem(), SecretsBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TalosMachineConfigVersionOutputTypeInput)(nil)).Elem(), TalosMachineConfigVersionOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TalosMachineConfigVersionOutputTypePtrInput)(nil)).Elem(), TalosMachineConfigVersionOutputTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TalosVersionOutputInput)(nil)).Elem(), TalosVersionOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TalosVersionOutputPtrInput)(nil)).Elem(), TalosVersionOutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustdInfoInput)(nil)).Elem(), TrustdInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustdInfoPtrInput)(nil)).Elem(), TrustdInfoArgs{})
	pulumi.RegisterOutputType(CertsOutput{})
	pulumi.RegisterOutputType(CertsPtrOutput{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterPtrOutput{})
	pulumi.RegisterOutputType(ConfigPatchesOutput{})
	pulumi.RegisterOutputType(ConfigPatchesPtrOutput{})
	pulumi.RegisterOutputType(PEMEncodedCertificateAndKeyOutput{})
	pulumi.RegisterOutputType(PEMEncodedCertificateAndKeyPtrOutput{})
	pulumi.RegisterOutputType(PEMEncodedKeyOutput{})
	pulumi.RegisterOutputType(PEMEncodedKeyPtrOutput{})
	pulumi.RegisterOutputType(SecretsOutput{})
	pulumi.RegisterOutputType(SecretsPtrOutput{})
	pulumi.RegisterOutputType(SecretsBundleOutput{})
	pulumi.RegisterOutputType(TalosMachineConfigVersionOutputTypeOutput{})
	pulumi.RegisterOutputType(TalosMachineConfigVersionOutputTypePtrOutput{})
	pulumi.RegisterOutputType(TalosVersionOutputOutput{})
	pulumi.RegisterOutputType(TalosVersionOutputPtrOutput{})
	pulumi.RegisterOutputType(TrustdInfoOutput{})
	pulumi.RegisterOutputType(TrustdInfoPtrOutput{})
}
