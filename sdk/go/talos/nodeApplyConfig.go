// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package talos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A node apply config resource
type NodeApplyConfig struct {
	pulumi.CustomResourceState

	// node endpoint address
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// allow insecure connections
	Insecure pulumi.BoolOutput `pulumi:"insecure"`
	// machineconfig
	MachineConfig pulumi.AssetOrArchiveOutput `pulumi:"machineConfig"`
	// machine config apply mode
	Mode pulumi.StringOutput `pulumi:"mode"`
	// node address
	Node pulumi.StringOutput `pulumi:"node"`
	// talosconfig
	TalosConfig pulumi.AssetOrArchiveOutput `pulumi:"talosConfig"`
	// wait timeout in seconds
	Timeout pulumi.IntOutput `pulumi:"timeout"`
}

// NewNodeApplyConfig registers a new resource with the given unique name, arguments, and options.
func NewNodeApplyConfig(ctx *pulumi.Context,
	name string, args *NodeApplyConfigArgs, opts ...pulumi.ResourceOption) (*NodeApplyConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.MachineConfig == nil {
		return nil, errors.New("invalid value for required argument 'MachineConfig'")
	}
	if args.Node == nil {
		return nil, errors.New("invalid value for required argument 'Node'")
	}
	if args.TalosConfig == nil {
		return nil, errors.New("invalid value for required argument 'TalosConfig'")
	}
	if isZero(args.Insecure) {
		args.Insecure = pulumi.BoolPtr(false)
	}
	if isZero(args.Mode) {
		args.Mode = TalosMachineConfigApplyMode("AUTO")
	}
	if isZero(args.Timeout) {
		args.Timeout = pulumi.IntPtr(600)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"machineConfig",
		"talosConfig",
	})
	opts = append(opts, secrets)
	var resource NodeApplyConfig
	err := ctx.RegisterResource("talos:index:nodeApplyConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeApplyConfig gets an existing NodeApplyConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeApplyConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeApplyConfigState, opts ...pulumi.ResourceOption) (*NodeApplyConfig, error) {
	var resource NodeApplyConfig
	err := ctx.ReadResource("talos:index:nodeApplyConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeApplyConfig resources.
type nodeApplyConfigState struct {
}

type NodeApplyConfigState struct {
}

func (NodeApplyConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeApplyConfigState)(nil)).Elem()
}

type nodeApplyConfigArgs struct {
	// node endpoint address
	Endpoint string `pulumi:"endpoint"`
	// whether to use insecure connection
	Insecure *bool `pulumi:"insecure"`
	// machineconfig
	MachineConfig pulumi.AssetOrArchive `pulumi:"machineConfig"`
	// machine config apply mode (default auto)
	Mode *TalosMachineConfigApplyMode `pulumi:"mode"`
	// node address
	Node string `pulumi:"node"`
	// talosconfig
	TalosConfig pulumi.AssetOrArchive `pulumi:"talosConfig"`
	// timeout in seconds (default 600)
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a NodeApplyConfig resource.
type NodeApplyConfigArgs struct {
	// node endpoint address
	Endpoint pulumi.StringInput
	// whether to use insecure connection
	Insecure pulumi.BoolPtrInput
	// machineconfig
	MachineConfig pulumi.AssetOrArchiveInput
	// machine config apply mode (default auto)
	Mode TalosMachineConfigApplyModePtrInput
	// node address
	Node pulumi.StringInput
	// talosconfig
	TalosConfig pulumi.AssetOrArchiveInput
	// timeout in seconds (default 600)
	Timeout pulumi.IntPtrInput
}

func (NodeApplyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeApplyConfigArgs)(nil)).Elem()
}

type NodeApplyConfigInput interface {
	pulumi.Input

	ToNodeApplyConfigOutput() NodeApplyConfigOutput
	ToNodeApplyConfigOutputWithContext(ctx context.Context) NodeApplyConfigOutput
}

func (*NodeApplyConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeApplyConfig)(nil)).Elem()
}

func (i *NodeApplyConfig) ToNodeApplyConfigOutput() NodeApplyConfigOutput {
	return i.ToNodeApplyConfigOutputWithContext(context.Background())
}

func (i *NodeApplyConfig) ToNodeApplyConfigOutputWithContext(ctx context.Context) NodeApplyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeApplyConfigOutput)
}

// NodeApplyConfigArrayInput is an input type that accepts NodeApplyConfigArray and NodeApplyConfigArrayOutput values.
// You can construct a concrete instance of `NodeApplyConfigArrayInput` via:
//
//          NodeApplyConfigArray{ NodeApplyConfigArgs{...} }
type NodeApplyConfigArrayInput interface {
	pulumi.Input

	ToNodeApplyConfigArrayOutput() NodeApplyConfigArrayOutput
	ToNodeApplyConfigArrayOutputWithContext(context.Context) NodeApplyConfigArrayOutput
}

type NodeApplyConfigArray []NodeApplyConfigInput

func (NodeApplyConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeApplyConfig)(nil)).Elem()
}

func (i NodeApplyConfigArray) ToNodeApplyConfigArrayOutput() NodeApplyConfigArrayOutput {
	return i.ToNodeApplyConfigArrayOutputWithContext(context.Background())
}

func (i NodeApplyConfigArray) ToNodeApplyConfigArrayOutputWithContext(ctx context.Context) NodeApplyConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeApplyConfigArrayOutput)
}

// NodeApplyConfigMapInput is an input type that accepts NodeApplyConfigMap and NodeApplyConfigMapOutput values.
// You can construct a concrete instance of `NodeApplyConfigMapInput` via:
//
//          NodeApplyConfigMap{ "key": NodeApplyConfigArgs{...} }
type NodeApplyConfigMapInput interface {
	pulumi.Input

	ToNodeApplyConfigMapOutput() NodeApplyConfigMapOutput
	ToNodeApplyConfigMapOutputWithContext(context.Context) NodeApplyConfigMapOutput
}

type NodeApplyConfigMap map[string]NodeApplyConfigInput

func (NodeApplyConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeApplyConfig)(nil)).Elem()
}

func (i NodeApplyConfigMap) ToNodeApplyConfigMapOutput() NodeApplyConfigMapOutput {
	return i.ToNodeApplyConfigMapOutputWithContext(context.Background())
}

func (i NodeApplyConfigMap) ToNodeApplyConfigMapOutputWithContext(ctx context.Context) NodeApplyConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeApplyConfigMapOutput)
}

type NodeApplyConfigOutput struct{ *pulumi.OutputState }

func (NodeApplyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeApplyConfig)(nil)).Elem()
}

func (o NodeApplyConfigOutput) ToNodeApplyConfigOutput() NodeApplyConfigOutput {
	return o
}

func (o NodeApplyConfigOutput) ToNodeApplyConfigOutputWithContext(ctx context.Context) NodeApplyConfigOutput {
	return o
}

// node endpoint address
func (o NodeApplyConfigOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeApplyConfig) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// allow insecure connections
func (o NodeApplyConfigOutput) Insecure() pulumi.BoolOutput {
	return o.ApplyT(func(v *NodeApplyConfig) pulumi.BoolOutput { return v.Insecure }).(pulumi.BoolOutput)
}

// machineconfig
func (o NodeApplyConfigOutput) MachineConfig() pulumi.AssetOrArchiveOutput {
	return o.ApplyT(func(v *NodeApplyConfig) pulumi.AssetOrArchiveOutput { return v.MachineConfig }).(pulumi.AssetOrArchiveOutput)
}

// machine config apply mode
func (o NodeApplyConfigOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeApplyConfig) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// node address
func (o NodeApplyConfigOutput) Node() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeApplyConfig) pulumi.StringOutput { return v.Node }).(pulumi.StringOutput)
}

// talosconfig
func (o NodeApplyConfigOutput) TalosConfig() pulumi.AssetOrArchiveOutput {
	return o.ApplyT(func(v *NodeApplyConfig) pulumi.AssetOrArchiveOutput { return v.TalosConfig }).(pulumi.AssetOrArchiveOutput)
}

// wait timeout in seconds
func (o NodeApplyConfigOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *NodeApplyConfig) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

type NodeApplyConfigArrayOutput struct{ *pulumi.OutputState }

func (NodeApplyConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeApplyConfig)(nil)).Elem()
}

func (o NodeApplyConfigArrayOutput) ToNodeApplyConfigArrayOutput() NodeApplyConfigArrayOutput {
	return o
}

func (o NodeApplyConfigArrayOutput) ToNodeApplyConfigArrayOutputWithContext(ctx context.Context) NodeApplyConfigArrayOutput {
	return o
}

func (o NodeApplyConfigArrayOutput) Index(i pulumi.IntInput) NodeApplyConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeApplyConfig {
		return vs[0].([]*NodeApplyConfig)[vs[1].(int)]
	}).(NodeApplyConfigOutput)
}

type NodeApplyConfigMapOutput struct{ *pulumi.OutputState }

func (NodeApplyConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeApplyConfig)(nil)).Elem()
}

func (o NodeApplyConfigMapOutput) ToNodeApplyConfigMapOutput() NodeApplyConfigMapOutput {
	return o
}

func (o NodeApplyConfigMapOutput) ToNodeApplyConfigMapOutputWithContext(ctx context.Context) NodeApplyConfigMapOutput {
	return o
}

func (o NodeApplyConfigMapOutput) MapIndex(k pulumi.StringInput) NodeApplyConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeApplyConfig {
		return vs[0].(map[string]*NodeApplyConfig)[vs[1].(string)]
	}).(NodeApplyConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeApplyConfigInput)(nil)).Elem(), &NodeApplyConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeApplyConfigArrayInput)(nil)).Elem(), NodeApplyConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeApplyConfigMapInput)(nil)).Elem(), NodeApplyConfigMap{})
	pulumi.RegisterOutputType(NodeApplyConfigOutput{})
	pulumi.RegisterOutputType(NodeApplyConfigArrayOutput{})
	pulumi.RegisterOutputType(NodeApplyConfigMapOutput{})
}
