# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._enums import *

__all__ = ['ClusterSecretsArgs', 'ClusterSecrets']

@pulumi.input_type
class ClusterSecretsArgs:
    def __init__(__self__, *,
                 config_version: Optional[pulumi.Input[Union[str, 'TalosMachineConfigVersion']]] = None,
                 talos_version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ClusterSecrets resource.
        :param pulumi.Input[Union[str, 'TalosMachineConfigVersion']] config_version: the desired machine config version to generate (default "v1alpha1")
        :param pulumi.Input[str] talos_version: the desired Talos version to generate config for (backwards compatibility, e.g. v0.8)
        """
        if config_version is None:
            config_version = 'v1alpha1'
        if config_version is not None:
            pulumi.set(__self__, "config_version", config_version)
        if talos_version is not None:
            pulumi.set(__self__, "talos_version", talos_version)

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> Optional[pulumi.Input[Union[str, 'TalosMachineConfigVersion']]]:
        """
        the desired machine config version to generate (default "v1alpha1")
        """
        return pulumi.get(self, "config_version")

    @config_version.setter
    def config_version(self, value: Optional[pulumi.Input[Union[str, 'TalosMachineConfigVersion']]]):
        pulumi.set(self, "config_version", value)

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> Optional[pulumi.Input[str]]:
        """
        the desired Talos version to generate config for (backwards compatibility, e.g. v0.8)
        """
        return pulumi.get(self, "talos_version")

    @talos_version.setter
    def talos_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "talos_version", value)


class ClusterSecrets(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_version: Optional[pulumi.Input[Union[str, 'TalosMachineConfigVersion']]] = None,
                 talos_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Talos secrets resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[str, 'TalosMachineConfigVersion']] config_version: the desired machine config version to generate (default "v1alpha1")
        :param pulumi.Input[str] talos_version: the desired Talos version to generate config for (backwards compatibility, e.g. v0.8)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClusterSecretsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Talos secrets resource

        :param str resource_name: The name of the resource.
        :param ClusterSecretsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterSecretsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_version: Optional[pulumi.Input[Union[str, 'TalosMachineConfigVersion']]] = None,
                 talos_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterSecretsArgs.__new__(ClusterSecretsArgs)

            if config_version is None:
                config_version = 'v1alpha1'
            __props__.__dict__["config_version"] = config_version
            __props__.__dict__["talos_version"] = talos_version
            __props__.__dict__["secrets"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secrets"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ClusterSecrets, __self__).__init__(
            'talos:index:clusterSecrets',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ClusterSecrets':
        """
        Get an existing ClusterSecrets resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ClusterSecretsArgs.__new__(ClusterSecretsArgs)

        __props__.__dict__["config_version"] = None
        __props__.__dict__["secrets"] = None
        __props__.__dict__["talos_version"] = None
        return ClusterSecrets(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "config_version")

    @property
    @pulumi.getter
    def secrets(self) -> pulumi.Output['outputs.SecretsBundle']:
        """
        Talos Secrets Bundle
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> pulumi.Output[str]:
        """
        Talos version the config is generated for
        """
        return pulumi.get(self, "talos_version")

