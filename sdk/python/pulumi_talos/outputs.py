# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'Certs',
    'Cluster',
    'ConfigPatches',
    'PEMEncodedCertificateAndKey',
    'PEMEncodedKey',
    'Secrets',
    'SecretsBundle',
    'TalosMachineConfigVersionOutput',
    'TalosVersionOutput',
    'TrustdInfo',
]

@pulumi.output_type
class Certs(dict):
    """
    Talos Certs type
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "Admin":
            suggest = "admin"
        elif key == "Etcd":
            suggest = "etcd"
        elif key == "K8s":
            suggest = "k8s"
        elif key == "K8sAggregator":
            suggest = "k8s_aggregator"
        elif key == "K8sServiceAccount":
            suggest = "k8s_service_account"
        elif key == "OS":
            suggest = "os"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Certs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Certs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Certs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin: Optional['outputs.PEMEncodedCertificateAndKey'] = None,
                 etcd: Optional['outputs.PEMEncodedCertificateAndKey'] = None,
                 k8s: Optional['outputs.PEMEncodedCertificateAndKey'] = None,
                 k8s_aggregator: Optional['outputs.PEMEncodedCertificateAndKey'] = None,
                 k8s_service_account: Optional['outputs.PEMEncodedKey'] = None,
                 os: Optional['outputs.PEMEncodedCertificateAndKey'] = None):
        """
        Talos Certs type
        """
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if etcd is not None:
            pulumi.set(__self__, "etcd", etcd)
        if k8s is not None:
            pulumi.set(__self__, "k8s", k8s)
        if k8s_aggregator is not None:
            pulumi.set(__self__, "k8s_aggregator", k8s_aggregator)
        if k8s_service_account is not None:
            pulumi.set(__self__, "k8s_service_account", k8s_service_account)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter(name="Admin")
    def admin(self) -> Optional['outputs.PEMEncodedCertificateAndKey']:
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter(name="Etcd")
    def etcd(self) -> Optional['outputs.PEMEncodedCertificateAndKey']:
        return pulumi.get(self, "etcd")

    @property
    @pulumi.getter(name="K8s")
    def k8s(self) -> Optional['outputs.PEMEncodedCertificateAndKey']:
        return pulumi.get(self, "k8s")

    @property
    @pulumi.getter(name="K8sAggregator")
    def k8s_aggregator(self) -> Optional['outputs.PEMEncodedCertificateAndKey']:
        return pulumi.get(self, "k8s_aggregator")

    @property
    @pulumi.getter(name="K8sServiceAccount")
    def k8s_service_account(self) -> Optional['outputs.PEMEncodedKey']:
        return pulumi.get(self, "k8s_service_account")

    @property
    @pulumi.getter(name="OS")
    def os(self) -> Optional['outputs.PEMEncodedCertificateAndKey']:
        return pulumi.get(self, "os")


@pulumi.output_type
class Cluster(dict):
    """
    Talos Cluster type
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "Id":
            suggest = "id"
        elif key == "Secret":
            suggest = "secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Cluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Cluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Cluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 secret: Optional[str] = None):
        """
        Talos Cluster type
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="Secret")
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")


@pulumi.output_type
class ConfigPatches(dict):
    """
    patches applied to the config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "patchFiles":
            suggest = "patch_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigPatches. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigPatches.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigPatches.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 patch_files: Optional[Sequence[Union[pulumi.Asset, pulumi.Archive]]] = None,
                 patches: Optional[Sequence[Any]] = None):
        """
        patches applied to the config
        :param Sequence[Union[pulumi.Asset, pulumi.Archive]] patch_files: patches specified as pulumi file assets
        :param Sequence[Any] patches: patches specified as a pulumi map
        """
        if patch_files is not None:
            pulumi.set(__self__, "patch_files", patch_files)
        if patches is not None:
            pulumi.set(__self__, "patches", patches)

    @property
    @pulumi.getter(name="patchFiles")
    def patch_files(self) -> Optional[Sequence[Union[pulumi.Asset, pulumi.Archive]]]:
        """
        patches specified as pulumi file assets
        """
        return pulumi.get(self, "patch_files")

    @property
    @pulumi.getter
    def patches(self) -> Optional[Sequence[Any]]:
        """
        patches specified as a pulumi map
        """
        return pulumi.get(self, "patches")


@pulumi.output_type
class PEMEncodedCertificateAndKey(dict):
    """
    Talos PEMEncodedCertificateAndKey type
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "Crt":
            suggest = "crt"
        elif key == "Key":
            suggest = "key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PEMEncodedCertificateAndKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PEMEncodedCertificateAndKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PEMEncodedCertificateAndKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 crt: Optional[Any] = None,
                 key: Optional[Any] = None):
        """
        Talos PEMEncodedCertificateAndKey type
        """
        if crt is not None:
            pulumi.set(__self__, "crt", crt)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="Crt")
    def crt(self) -> Optional[Any]:
        return pulumi.get(self, "crt")

    @property
    @pulumi.getter(name="Key")
    def key(self) -> Optional[Any]:
        return pulumi.get(self, "key")


@pulumi.output_type
class PEMEncodedKey(dict):
    """
    Talos PEMEncodedKey type
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "Key":
            suggest = "key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PEMEncodedKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PEMEncodedKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PEMEncodedKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: Optional[Any] = None):
        """
        Talos PEMEncodedKey type
        """
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="Key")
    def key(self) -> Optional[Any]:
        return pulumi.get(self, "key")


@pulumi.output_type
class Secrets(dict):
    """
    Talos Secrets type
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "AESCBCEncryptionSecret":
            suggest = "aescbc_encryption_secret"
        elif key == "BootstrapToken":
            suggest = "bootstrap_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Secrets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Secrets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Secrets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aescbc_encryption_secret: Optional[str] = None,
                 bootstrap_token: Optional[str] = None):
        """
        Talos Secrets type
        """
        if aescbc_encryption_secret is not None:
            pulumi.set(__self__, "aescbc_encryption_secret", aescbc_encryption_secret)
        if bootstrap_token is not None:
            pulumi.set(__self__, "bootstrap_token", bootstrap_token)

    @property
    @pulumi.getter(name="AESCBCEncryptionSecret")
    def aescbc_encryption_secret(self) -> Optional[str]:
        return pulumi.get(self, "aescbc_encryption_secret")

    @property
    @pulumi.getter(name="BootstrapToken")
    def bootstrap_token(self) -> Optional[str]:
        return pulumi.get(self, "bootstrap_token")


@pulumi.output_type
class SecretsBundle(dict):
    """
    Talos SecretsBundle type
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "Certs":
            suggest = "certs"
        elif key == "Cluster":
            suggest = "cluster"
        elif key == "Secrets":
            suggest = "secrets"
        elif key == "TrustdInfo":
            suggest = "trustd_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretsBundle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretsBundle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretsBundle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certs: Optional['outputs.Certs'] = None,
                 cluster: Optional['outputs.Cluster'] = None,
                 secrets: Optional['outputs.Secrets'] = None,
                 trustd_info: Optional['outputs.TrustdInfo'] = None):
        """
        Talos SecretsBundle type
        """
        if certs is not None:
            pulumi.set(__self__, "certs", certs)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if trustd_info is not None:
            pulumi.set(__self__, "trustd_info", trustd_info)

    @property
    @pulumi.getter(name="Certs")
    def certs(self) -> Optional['outputs.Certs']:
        return pulumi.get(self, "certs")

    @property
    @pulumi.getter(name="Cluster")
    def cluster(self) -> Optional['outputs.Cluster']:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="Secrets")
    def secrets(self) -> Optional['outputs.Secrets']:
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="TrustdInfo")
    def trustd_info(self) -> Optional['outputs.TrustdInfo']:
        return pulumi.get(self, "trustd_info")


@pulumi.output_type
class TalosMachineConfigVersionOutput(dict):
    """
    Talos Machine Configuration Version
    """
    def __init__(__self__):
        """
        Talos Machine Configuration Version
        """
        pass


@pulumi.output_type
class TalosVersionOutput(dict):
    """
    Talos Version
    """
    def __init__(__self__):
        """
        Talos Version
        """
        pass


@pulumi.output_type
class TrustdInfo(dict):
    """
    Talos TrustdInfo type
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "Token":
            suggest = "token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustdInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustdInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustdInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 token: Optional[str] = None):
        """
        Talos TrustdInfo type
        """
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="Token")
    def token(self) -> Optional[str]:
        return pulumi.get(self, "token")


