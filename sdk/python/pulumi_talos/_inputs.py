# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *

__all__ = [
    'CertsArgs',
    'ClusterArgs',
    'PEMEncodedCertificateAndKeyArgs',
    'PEMEncodedKeyArgs',
    'SecretsBundleArgs',
    'SecretsArgs',
    'TalosMachineConfigVersionOutputArgs',
    'TalosVersionOutputArgs',
    'TrustdInfoArgs',
]

@pulumi.input_type
class CertsArgs:
    def __init__(__self__, *,
                 admin: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']] = None,
                 etcd: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']] = None,
                 k8s: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']] = None,
                 k8s_aggregator: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']] = None,
                 k8s_service_account: Optional[pulumi.Input['PEMEncodedKeyArgs']] = None,
                 os: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']] = None):
        """
        Talos Certs type
        """
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if etcd is not None:
            pulumi.set(__self__, "etcd", etcd)
        if k8s is not None:
            pulumi.set(__self__, "k8s", k8s)
        if k8s_aggregator is not None:
            pulumi.set(__self__, "k8s_aggregator", k8s_aggregator)
        if k8s_service_account is not None:
            pulumi.set(__self__, "k8s_service_account", k8s_service_account)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter(name="Admin")
    def admin(self) -> Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]:
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter(name="Etcd")
    def etcd(self) -> Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]:
        return pulumi.get(self, "etcd")

    @etcd.setter
    def etcd(self, value: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]):
        pulumi.set(self, "etcd", value)

    @property
    @pulumi.getter(name="K8s")
    def k8s(self) -> Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]:
        return pulumi.get(self, "k8s")

    @k8s.setter
    def k8s(self, value: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]):
        pulumi.set(self, "k8s", value)

    @property
    @pulumi.getter(name="K8sAggregator")
    def k8s_aggregator(self) -> Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]:
        return pulumi.get(self, "k8s_aggregator")

    @k8s_aggregator.setter
    def k8s_aggregator(self, value: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]):
        pulumi.set(self, "k8s_aggregator", value)

    @property
    @pulumi.getter(name="K8sServiceAccount")
    def k8s_service_account(self) -> Optional[pulumi.Input['PEMEncodedKeyArgs']]:
        return pulumi.get(self, "k8s_service_account")

    @k8s_service_account.setter
    def k8s_service_account(self, value: Optional[pulumi.Input['PEMEncodedKeyArgs']]):
        pulumi.set(self, "k8s_service_account", value)

    @property
    @pulumi.getter(name="OS")
    def os(self) -> Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input['PEMEncodedCertificateAndKeyArgs']]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        Talos Cluster type
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="Id")
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="Secret")
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class PEMEncodedCertificateAndKeyArgs:
    def __init__(__self__, *,
                 crt: Optional[Any] = None,
                 key: Optional[Any] = None):
        """
        Talos PEMEncodedCertificateAndKey type
        """
        if crt is not None:
            pulumi.set(__self__, "crt", crt)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="Crt")
    def crt(self) -> Optional[Any]:
        return pulumi.get(self, "crt")

    @crt.setter
    def crt(self, value: Optional[Any]):
        pulumi.set(self, "crt", value)

    @property
    @pulumi.getter(name="Key")
    def key(self) -> Optional[Any]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[Any]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class PEMEncodedKeyArgs:
    def __init__(__self__, *,
                 key: Optional[Any] = None):
        """
        Talos PEMEncodedKey type
        """
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="Key")
    def key(self) -> Optional[Any]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[Any]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class SecretsBundleArgs:
    def __init__(__self__, *,
                 certs: Optional[pulumi.Input['CertsArgs']] = None,
                 cluster: Optional[pulumi.Input['ClusterArgs']] = None,
                 secrets: Optional[pulumi.Input['SecretsArgs']] = None,
                 trustd_info: Optional[pulumi.Input['TrustdInfoArgs']] = None):
        """
        Talos SecretsBundle type
        """
        if certs is not None:
            pulumi.set(__self__, "certs", certs)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if trustd_info is not None:
            pulumi.set(__self__, "trustd_info", trustd_info)

    @property
    @pulumi.getter(name="Certs")
    def certs(self) -> Optional[pulumi.Input['CertsArgs']]:
        return pulumi.get(self, "certs")

    @certs.setter
    def certs(self, value: Optional[pulumi.Input['CertsArgs']]):
        pulumi.set(self, "certs", value)

    @property
    @pulumi.getter(name="Cluster")
    def cluster(self) -> Optional[pulumi.Input['ClusterArgs']]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input['ClusterArgs']]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter(name="Secrets")
    def secrets(self) -> Optional[pulumi.Input['SecretsArgs']]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input['SecretsArgs']]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="TrustdInfo")
    def trustd_info(self) -> Optional[pulumi.Input['TrustdInfoArgs']]:
        return pulumi.get(self, "trustd_info")

    @trustd_info.setter
    def trustd_info(self, value: Optional[pulumi.Input['TrustdInfoArgs']]):
        pulumi.set(self, "trustd_info", value)


@pulumi.input_type
class SecretsArgs:
    def __init__(__self__, *,
                 aescbc_encryption_secret: Optional[pulumi.Input[str]] = None,
                 bootstrap_token: Optional[pulumi.Input[str]] = None):
        """
        Talos Secrets type
        """
        if aescbc_encryption_secret is not None:
            pulumi.set(__self__, "aescbc_encryption_secret", aescbc_encryption_secret)
        if bootstrap_token is not None:
            pulumi.set(__self__, "bootstrap_token", bootstrap_token)

    @property
    @pulumi.getter(name="AESCBCEncryptionSecret")
    def aescbc_encryption_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aescbc_encryption_secret")

    @aescbc_encryption_secret.setter
    def aescbc_encryption_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aescbc_encryption_secret", value)

    @property
    @pulumi.getter(name="BootstrapToken")
    def bootstrap_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bootstrap_token")

    @bootstrap_token.setter
    def bootstrap_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_token", value)


@pulumi.input_type
class TalosMachineConfigVersionOutputArgs:
    def __init__(__self__):
        """
        Talos Machine Configuration Version Output
        """
        pass


@pulumi.input_type
class TalosVersionOutputArgs:
    def __init__(__self__):
        """
        Talos Version Output
        """
        pass


@pulumi.input_type
class TrustdInfoArgs:
    def __init__(__self__, *,
                 token: Optional[pulumi.Input[str]] = None):
        """
        Talos TrustdInfo type
        """
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="Token")
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


