# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetKubeConfigResult',
    'AwaitableGetKubeConfigResult',
    'get_kube_config',
    'get_kube_config_output',
]

@pulumi.output_type
class GetKubeConfigResult:
    def __init__(__self__, kubeconfig=None):
        if kubeconfig and not isinstance(kubeconfig, str):
            raise TypeError("Expected argument 'kubeconfig' to be a str")
        pulumi.set(__self__, "kubeconfig", kubeconfig)

    @property
    @pulumi.getter
    def kubeconfig(self) -> str:
        """
        kubeconfig retrieved from the talos cluster
        """
        return pulumi.get(self, "kubeconfig")


class AwaitableGetKubeConfigResult(GetKubeConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKubeConfigResult(
            kubeconfig=self.kubeconfig)


def get_kube_config(endpoint: Optional[str] = None,
                    node: Optional[str] = None,
                    talos_config: Optional[str] = None,
                    timeout: Optional[int] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKubeConfigResult:
    """
    retrieve kubeconfig from a talos cluster


    :param str endpoint: node endpoint address
    :param str node: node address
    :param str talos_config: talosconfig
    :param int timeout: timeout in seconds (default 600)
    """
    __args__ = dict()
    __args__['endpoint'] = endpoint
    __args__['node'] = node
    __args__['talosConfig'] = talos_config
    __args__['timeout'] = timeout
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('talos:index:getKubeConfig', __args__, opts=opts, typ=GetKubeConfigResult).value

    return AwaitableGetKubeConfigResult(
        kubeconfig=__ret__.kubeconfig)


@_utilities.lift_output_func(get_kube_config)
def get_kube_config_output(endpoint: Optional[pulumi.Input[str]] = None,
                           node: Optional[pulumi.Input[str]] = None,
                           talos_config: Optional[pulumi.Input[str]] = None,
                           timeout: Optional[pulumi.Input[Optional[int]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKubeConfigResult]:
    """
    retrieve kubeconfig from a talos cluster


    :param str endpoint: node endpoint address
    :param str node: node address
    :param str talos_config: talosconfig
    :param int timeout: timeout in seconds (default 600)
    """
    ...
