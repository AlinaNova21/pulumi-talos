# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NodeBootstrapArgs', 'NodeBootstrap']

@pulumi.input_type
class NodeBootstrapArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 node: pulumi.Input[str],
                 talosconfig: pulumi.Input[str]):
        """
        The set of arguments for constructing a NodeBootstrap resource.
        :param pulumi.Input[str] endpoint: node endpoint address
        :param pulumi.Input[str] node: node address
        :param pulumi.Input[str] talosconfig: talosconfig
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "node", node)
        pulumi.set(__self__, "talosconfig", talosconfig)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        node endpoint address
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def node(self) -> pulumi.Input[str]:
        """
        node address
        """
        return pulumi.get(self, "node")

    @node.setter
    def node(self, value: pulumi.Input[str]):
        pulumi.set(self, "node", value)

    @property
    @pulumi.getter
    def talosconfig(self) -> pulumi.Input[str]:
        """
        talosconfig
        """
        return pulumi.get(self, "talosconfig")

    @talosconfig.setter
    def talosconfig(self, value: pulumi.Input[str]):
        pulumi.set(self, "talosconfig", value)


class NodeBootstrap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 node: Optional[pulumi.Input[str]] = None,
                 talosconfig: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A node bootstrap resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] endpoint: node endpoint address
        :param pulumi.Input[str] node: node address
        :param pulumi.Input[str] talosconfig: talosconfig
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NodeBootstrapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A node bootstrap resource

        :param str resource_name: The name of the resource.
        :param NodeBootstrapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodeBootstrapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 node: Optional[pulumi.Input[str]] = None,
                 talosconfig: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodeBootstrapArgs.__new__(NodeBootstrapArgs)

            if endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint'")
            __props__.__dict__["endpoint"] = endpoint
            if node is None and not opts.urn:
                raise TypeError("Missing required property 'node'")
            __props__.__dict__["node"] = node
            if talosconfig is None and not opts.urn:
                raise TypeError("Missing required property 'talosconfig'")
            __props__.__dict__["talosconfig"] = talosconfig
        super(NodeBootstrap, __self__).__init__(
            'talos:index:nodeBootstrap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NodeBootstrap':
        """
        Get an existing NodeBootstrap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NodeBootstrapArgs.__new__(NodeBootstrapArgs)

        __props__.__dict__["endpoint"] = None
        __props__.__dict__["node"] = None
        __props__.__dict__["talosconfig"] = None
        return NodeBootstrap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        """
        node endpoint address
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def node(self) -> pulumi.Output[str]:
        """
        node address
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter
    def talosconfig(self) -> pulumi.Output[str]:
        """
        talosconfig
        """
        return pulumi.get(self, "talosconfig")

